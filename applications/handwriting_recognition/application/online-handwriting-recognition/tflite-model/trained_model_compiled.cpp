/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 20.03.2021 01:29:37

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/kernels/micro_ops.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

namespace {

constexpr int kTensorArenaSize = 3632;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[28];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[13];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,600 } };
const TfArray<1, float> quant0_scale = { 1, { 0.2177690714597702, } };
const TfArray<1, int> quant0_zero = { 1, { -13 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[2] = { -1, 832, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(8) int32_t tensor_data2[4] = { 1, 1, 200, 3, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data3[8] = { -112, -9, -565, 200, -5, -221, 195, -110, };
const TfArray<1, int> tensor_dimension3 = { 1, { 8 } };
const TfArray<8, float> quant3_scale = { 8, { 0.00092832534573972225, 0.00093911448493599892, 0.0009024300379678607, 0.0010443212231621146, 0.00093684613239020109, 0.0008353677112609148, 0.00066998135298490524, 0.0011688908562064171, } };
const TfArray<8, int> quant3_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(8) int32_t tensor_data4[16] = { 83, 1, -9, -54, 19, 8, 3, 47, -75, -14, 23, 80, 95, -28, -13, -162, };
const TfArray<1, int> tensor_dimension4 = { 1, { 16 } };
const TfArray<1, float> quant4_scale = { 1, { 0.0078935138881206512, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(8) int32_t tensor_data5[16] = { 390, -143, 42, -435, -111, 91, 340, 14, 47, -366, -524, 263, -791, 695, 46, 20, };
const TfArray<1, int> tensor_dimension5 = { 1, { 16 } };
const TfArray<16, float> quant5_scale = { 16, { 0.0008573240484111011, 0.00073655589949339628, 0.0012280321680009365, 0.00069069874007254839, 0.00079378962982445955, 0.00079533038660883904, 0.00094154319958761334, 0.00092221610248088837, 0.0010235143126919866, 0.00074610550655052066, 0.00085301639046519995, 0.00087359891040250659, 0.00061834737425670028, 0.00080383085878565907, 0.00084816495655104518, 0.00094631133833900094, } };
const TfArray<16, int> quant5_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(8) int32_t tensor_data6[32] = { 294, 837, 245, -304, 72, -417, 265, 83, 135, -13, -114, 232, 335, 22, 216, -1074, 185, -103, 442, -50, -765, -218, -389, 196, -738, 2, -27, 381, -350, 80, -163, 238, };
const TfArray<1, int> tensor_dimension6 = { 1, { 32 } };
const TfArray<32, float> quant6_scale = { 32, { 0.0016595282359048724, 0.00081156636588275433, 0.0015846476890146732, 0.0013154993066564202, 0.0016601171810179949, 0.00091512600192800164, 0.0017053112387657166, 0.0014962849672883749, 0.0015270289732143283, 0.0012072920799255371, 0.0012733142357319593, 0.0015412502689287066, 0.0019499857444316149, 0.0013116482878103852, 0.0014417367056012154, 0.00074062886415049434, 0.0014856450725346804, 0.0012852516956627369, 0.0012689473805949092, 0.0020492090843617916, 0.00078069174196571112, 0.0011329588014632463, 0.0010668791364878416, 0.0015085409395396709, 0.0011959968833252788, 0.00091029959730803967, 0.0009886531624943018, 0.0014751534909009933, 0.0010073083685711026, 0.0011225292691960931, 0.0013522817753255367, 0.0015526982024312019, } };
const TfArray<32, int> quant6_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(8) int32_t tensor_data7[64] = { 24, 135, 39, 223, 15, 30, 281, 172, 116, -37, 8, 136, 11, 163, 235, 170, 115, 2, -304, 9, 92, 17, 244, -588, -415, -79, 112, -218, 48, 92, 130, -39, 185, -49, 121, 371, -108, 65, 60, -9, -484, -96, 101, -160, 69, -177, -183, 122, 138, -203, -80, 277, -7, 288, 128, -118, 70, 153, -64, -12, 8, 20, 163, -586, };
const TfArray<1, int> tensor_dimension7 = { 1, { 64 } };
const TfArray<64, float> quant7_scale = { 64, { 0.0023382294457405806, 0.001359451562166214, 0.0013148454017937183, 0.0014321592170745134, 0.0020863870158791542, 0.0015794070204719901, 0.0012516842689365149, 0.0019717379473149776, 0.0017917766235768795, 0.0024773494806140661, 0.0019865154754370451, 0.0022526064421981573, 0.0024918271228671074, 0.0019454488065093756, 0.0016169967129826546, 0.0020617523696273565, 0.0018287739949300885, 0.001915308297611773, 0.0012947223149240017, 0.0031479080207645893, 0.0013953867601230741, 0.0017933448543772101, 0.0018650606507435441, 0.0017002073582261801, 0.0013308521592989564, 0.0023549513425678015, 0.0016869591781869531, 0.0014193947426974773, 0.0026047972496598959, 0.0021216776221990585, 0.0018296003108844161, 0.0016725780442357063, 0.0014077249215915799, 0.0015497773420065641, 0.0015824517467990518, 0.0014445061096921563, 0.0017965196166187525, 0.0020091605838388205, 0.0020436842460185289, 0.0019463893258944154, 0.0013318134006112814, 0.0021015938837081194, 0.0018900216091424227, 0.0014210146619006991, 0.002337573328986764, 0.0013921430800110102, 0.0012467647902667522, 0.0013841093750670552, 0.0026042910758405924, 0.0021416174713522196, 0.0011419575894251466, 0.0014149140333756804, 0.0017499517416581511, 0.0017055603675544262, 0.0016014206921681762, 0.0028253707569092512, 0.0022045087534934282, 0.0015681975055485964, 0.0013810045784339309, 0.0015057738637551665, 0.0011495639337226748, 0.001466196496039629, 0.0011893431656062603, 0.001249292865395546, } };
const TfArray<64, int> quant7_zero = { 64, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(8) int32_t tensor_data8[16] = { -186, -36, 246, 110, 134, 110, -49, -22, -5, -104, 115, 21, 22, -13, -21, 122, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<1, float> quant8_scale = { 1, { 0.0013665250735357404, } };
const TfArray<1, int> quant8_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(8) int8_t tensor_data9[16*832] = { 
  -15, -13, -2, -24, 0, -31, 6, -27, -18, -11, -2, -11, 1, 8, -19, -1, -27, 10, 10, -12, -7, 54, -2, -6, 15, 14, 24, -26, 4, 2, 12, 3, -13, 5, 0, -3, 2, -5, -1, -41, -5, -7, 4, 5, 10, 9, 24, 9, 21, 25, -5, -5, 10, -12, 43, 26, 6, -17, -7, 1, 0, 12, -11, 25, 8, 10, 13, -25, 5, -13, 32, -49, -17, -15, -12, -13, -32, -14, -15, 2, -38, 16, 20, 15, -26, -22, -32, 2, 14, -11, 34, 3, 58, -62, 23, 37, 4, 6, 33, 22, -11, -71, -19, -27, 27, -14, 12, 29, 44, -15, 54, 11, 5, 9, -11, -21, 44, -20, 13, 29, -2, -31, -47, -5, 1, 27, -27, 32, 6, 2, -7, -24, 13, -36, 2, -38, -5, 4, -1, 9, -54, 6, -2, -2, 14, 8, 54, -2, -5, 17, -33, 41, 28, 41, 12, -4, 35, -33, 35, 13, 50, 42, 23, 14, -12, -37, -19, -47, 27, 3, 46, -34, 36, 12, 8, 27, 5, 47, 21, -2, 16, -13, 15, 26, -39, -15, -37, -8, 26, 9, -17, 14, 5, 6, -16, -9, -12, -22, 10, -29, 13, -22, 1, -3, -25, 11, 21, 6, -15, 6, 55, 9, 7, 7, -14, 37, 39, 44, -27, 11, 42, -12, 29, 46, 46, 48, 39, 33, 10, -23, -33, -15, 32, 11, 45, -20, 22, 6, 12, 28, -19, 31, 4, 0, 29, -23, 23, 24, -66, -9, -22, -2, 27, 3, -27, 25, -13, 3, 11, -5, -9, 4, 16, -16, 9, -10, -2, -2, -28, -3, 13, 12, -15, -12, 73, 27, 7, 5, -22, 75, 57, 9, -25, 5, 44, 5, 62, 28, 23, 9, 18, 23, -10, -19, -14, -39, 28, 35, 73, -27, 13, 8, 25, 36, -19, 48, 14, 0, 17, -27, -2, 26, -47, 7, -32, 1, 54, 29, -23, 32, -6, 3, 14, 25, -5, -12, 15, -10, 4, -12, -2, 3, -32, -11, 25, -3, -8, 11, 49, 26, 8, 2, -20, 75, 34, 39, 24, -9, 32, 15, 67, 13, -9, -11, 20, 48, -4, -23, -17, 22, 38, 12, 102, -26, 2, 19, 19, 29, -18, 55, 16, -12, 21, -45, -33, 39, -28, -14, -36, 10, 50, 15, -27, 18, 13, -6, 6, -1, -11, -19, 3, -2, 13, -21, 22, -12, -38, 2, 15, 9, -34, -1, 38, 7, 6, -8, -30, 61, 44, 17, 10, 12, 25, 22, 73, 48, -16, 3, -12, 37, -4, 15, -3, 19, 48, 37, 93, -1, 12, 18, 25, 23, -14, 58, 19, 12, 30, -39, 15, 17, -19, 14, -20, 7, 54, 11, -32, 8, -10, -11, -27, 32, -12, -12, -11, 4, -6, -7, 22, -10, -9, -14, 24, 32, -4, -13, 55, 18, -22, -13, -53, 32, 38, 20, -29, 12, 10, 45, 46, 34, -7, 38, -6, 32, 2, -20, -16, 16, 42, 39, 73, 6, -3, 45, 29, 25, -19, 44, 21, -6, 48, -29, -7, 35, -27, -16, -16, 19, 46, 18, -34, 20, -2, -18, -18, 12, -2, -16, -28, -6, 7, -6, 2, -15, -15, -31, 20, 36, -21, -11, 35, 5, -5, -5, -64, 43, 23, 42, -1, 18, 47, 22, 50, 57, 16, 15, 22, 1, 14, -5, -21, 3, 37, 56, 13, -3, 7, 36, 8, 0, -54, 33, 10, 8, 24, -22, 6, 13, -15, 2, -17, 10, 42, 6, -36, 21, -8, -5, -53, -4, -1, -15, -35, 10, 19, -17, -7, -2, -12, -61, 8, 38, -29, -10, 40, 43, -21, -9, -75, 58, 28, 62, -31, -32, 29, 16, 30, 22, -9, 26, 16, 22, -2, -25, -2, 11, 56, 40, 15, -5, -11, 32, -11, -41, -26, 30, 21, 1, 15, 4, 28, 66, -40, -23, -33, 14, 45, 6, -26, 16, 13, -48, -66, -1, -6, -49, -28, -24, -13, -20, 14, 1, -25, -56, -6, 48, -36, 7, 22, 10, -10, -12, -64, 45, 27, 35, 9, -10, -26, -26, 35, -39, -4, 4, -6, 13, 2, -23, 6, -6, 31, 34, -1, -25, -13, 34, -14, -98, -60, 31, 5, -10, 2, -8, 46, 28, -33, -3, -14, 20, 31, -10, -34, 28, 7, -17, -15, 0, 0, -26, -79, -18, 31, -13, 13, -19, -27, -64, 13, 31, -37, 1, 20, -7, -14, 5, -57, 24, 11, 3, -25, -3, 12, -38, 9, 43, 19, 13, -30, -23, -23, -22, 0, -16, 15, 12, -5, -10, -15, 10, -11, -68, -77, 15, -12, -5, -10, -1, 24, 23, -43, -50, -18, -13, 59, 45, -29, 12, 46, -26, -52, -28, 43, -14, -7, 2, 19, 22, -6, 3, 5, -41, 13, -1, -42, -8, 33, -4, -3, -43, 20, 42, 15, 46, -17, -16, -12, 23, 8, -1, 8, 4, -27, -23, -4, -32, -6, -18, 27, 18, 0, 16, 1, 27, -7, -51, -32, 26, 13, 28, -14, -6, -3, -27, -25, 10, -8, -3, 43, -57, -23, 11, 
  14, 22, -48, 3, -22, 11, 15, -12, 40, 29, -27, -22, 11, -35, 5, 28, 25, -3, -12, 26, 7, -22, -16, 36, 3, -9, 35, 21, -1, 24, 6, -33, -40, 21, 6, -20, 3, 9, -7, 14, 2, 27, -34, 29, 47, 56, -36, -38, 40, 12, -16, 25, -13, 50, 9, 20, -18, -25, 51, 19, 20, 29, 43, 21, -15, -8, -18, -27, 10, 27, -6, 4, 50, 38, 11, 1, -11, -14, 26, 33, 33, -5, 12, -4, -1, 14, -21, 35, 5, -40, 39, 27, -5, 17, -9, -3, -25, 33, 0, -21, -4, 27, -6, 18, 1, 13, -17, 12, 21, 15, -5, -32, 2, 44, 26, -2, -17, 54, 3, 41, -14, -19, 14, 27, 6, 15, 15, 29, 21, -6, 3, 13, 6, 24, -7, -4, 28, 33, 20, -2, 12, -23, 0, 44, 5, 13, 19, -26, 5, 38, -39, 35, 26, -16, 26, 12, 15, 64, -9, 1, -31, 21, -3, -23, 16, 37, 2, 29, 6, 2, -7, -4, 36, 50, -6, -25, 0, 27, 13, 12, -5, 59, 5, 16, 17, -12, 8, 7, 6, 33, 25, 38, 24, -18, 3, 0, 6, 15, -4, -26, 27, 42, 24, 0, 15, -13, 11, 59, 2, 14, 21, 17, 28, 40, -37, 33, 3, -46, 24, 35, 49, 1, -25, -17, -17, 30, 10, 4, 24, 35, 4, 34, 12, 4, -13, 26, 12, 22, -16, -19, -20, 29, 1, -20, -6, 39, 10, 10, -10, -34, 34, 25, -19, 17, 34, 48, 5, -6, -13, 6, -5, 18, 28, -38, 24, 36, 2, -7, 0, -7, -11, 16, 16, 2, 28, 57, 32, 39, -33, 31, 26, -65, 16, 17, 104, -17, -54, 27, -28, 14, 31, 19, 44, 35, 2, 29, 0, -12, 14, 36, 28, 21, -14, -18, -24, 37, 8, -33, -36, 7, 4, 1, 19, -8, 36, 28, -6, 11, 53, 65, -16, -2, 6, -2, 8, 33, 18, -29, 24, 40, 34, -10, -4, -35, -6, 15, 23, -17, 9, 55, 18, 36, -45, 19, 19, -47, 21, 16, 85, 18, -9, 23, -12, 11, 12, 51, 44, 37, 3, 16, 5, -7, -23, -5, 8, 35, -12, -33, -18, 15, 14, -18, -35, 29, 11, -20, 12, -14, 50, 24, -3, -16, 34, 68, -23, -17, 5, 55, -19, 13, 19, -14, 46, 24, 42, -27, 3, -19, -24, 5, 24, 19, 21, 88, 13, 42, -35, 22, 16, -24, 4, 9, 87, 20, -26, 30, -14, 17, -4, 57, 37, 47, 4, 32, -13, -1, -33, 5, 3, 19, -17, -27, -27, 43, 33, -47, -20, 35, 8, -18, 7, -33, 48, 12, 13, 1, 25, 34, -26, -1, 9, 17, -21, 30, 5, -20, 38, 25, 19, -2, 6, -22, -31, 4, 0, 1, 9, 88, 4, 44, -84, 16, 26, -71, -22, 29, 114, 34, -34, 18, -1, 1, 8, 41, 51, 46, 17, 29, 21, 31, -26, -5, 22, 9, -16, -27, -21, 37, 22, -29, -25, 16, 2, -7, 8, -47, 44, 25, 5, 1, 12, 52, -36, -11, 27, 13, -38, 44, 0, -36, 65, 4, 16, -12, 15, -10, -23, -4, 11, 4, 15, 83, 9, 48, -52, 10, -11, -71, 18, 36, 110, 35, -5, 30, 11, 20, 13, 15, 44, 43, 32, 48, 3, 17, -10, 8, 28, 10, 10, -28, -45, 40, 26, -35, -8, 0, -25, -30, -11, -35, 56, 22, -19, -26, 17, 24, -49, -31, 11, -12, -55, 26, 12, 1, 49, -11, 8, -17, 42, -38, -23, -3, -36, -2, -3, 64, -18, 54, -95, 1, -6, -84, 6, 28, 83, 26, -13, 55, -5, 23, 14, 8, 47, 24, 31, 12, 0, 33, -21, 12, 26, -7, 8, -41, -30, 26, 37, -30, 11, -6, -26, 9, 15, -57, 36, 8, 0, -1, 37, 27, -4, -3, 20, 8, -36, 32, 6, -64, 4, -10, 1, 0, 36, -13, -11, -2, -28, -9, -16, 84, -12, 31, -47, 12, 1, -84, 22, 13, 109, 25, -30, 29, 39, -13, 29, 19, 22, 44, 51, -7, -4, -33, 11, 3, 61, -9, -16, -54, -44, 26, 59, -74, -6, -38, -21, 17, -8, -33, 52, 41, 5, 3, 40, 6, -13, -55, -6, -15, -18, 2, -38, -33, 29, -12, 62, 40, 29, -39, -3, 5, -16, 0, -2, 68, -14, 66, -64, 19, 3, -82, 38, -22, 67, 6, -30, 24, 39, -4, 27, 7, 31, 11, 56, -7, 9, -15, 9, 18, 47, 8, -16, -29, -69, 27, 38, -41, 11, -6, -46, 39, -11, -44, 41, 27, 13, -17, 5, -1, -14, 3, -27, 7, -11, -9, -10, -7, -4, -13, -5, 46, 45, -70, -56, 8, -60, 24, 30, -9, 19, -42, -36, 18, 15, -12, 6, -19, -16, -29, -1, -4, 19, 13, -19, 29, -23, -10, 70, -21, 7, 22, 28, -60, 38, 17, -15, -6, -38, 3, 36, -45, -3, -4, -48, 26, 9, 22, 18, 34, 8, -6, 11, 29, 
  -77, -61, -23, 8, -88, 6, 8, -36, -101, -62, -19, -41, 9, 4, -9, 23, -84, 11, -32, -14, -31, 6, -38, 15, -3, -60, -4, -32, 9, -52, 15, 11, 61, -21, -7, 50, -29, -9, -9, -17, 4, -16, 35, -1, -39, -18, 22, -10, -74, 5, -55, -34, 16, -27, 37, -39, -20, -15, -52, 15, -22, -21, -58, -5, -8, 25, -50, 14, -66, -6, 4, 8, -33, -23, -1, 18, -92, -47, 15, 22, -29, 4, -12, 37, -11, -36, -45, -46, 27, -44, -73, -41, -10, 11, -5, 22, 40, -11, -69, 35, 12, -49, -127, -79, -55, 16, 35, -12, -40, 3, -9, -35, -38, 6, -33, -5, -5, 11, -64, -53, -8, -6, -51, 41, 40, -20, -34, -38, 41, 41, -41, 1, 22, -46, -38, -10, -18, -32, -7, 25, -61, -23, 40, 17, -8, 3, -51, 43, -18, -15, -5, -68, 5, 33, -43, -71, 5, 8, 20, -5, 47, -12, 27, 44, -11, 11, -20, -41, -86, 25, 20, -1, 9, -18, 5, 8, -28, -39, -21, 18, 14, -4, -52, -33, 34, 13, -1, 35, -18, -11, 4, -24, 29, 7, -29, 36, 32, 11, -33, 2, -1, 2, -51, 0, 4, -35, 75, 21, 40, -10, -23, 28, -3, -30, 10, -49, 10, 47, 4, -38, 10, -10, -16, -16, 25, 5, 9, 31, -12, 38, 1, 19, -12, -17, 14, 2, 21, -34, -50, -20, -35, -23, -5, -13, 11, 4, -83, 6, 43, -14, 10, 34, 10, 0, 8, -5, 30, 1, -23, 10, 50, -1, -8, 10, 11, -20, -23, 4, 1, -21, 49, -8, 40, -24, -1, -1, -9, 5, -3, -8, 17, 50, 38, -3, 19, 79, -63, -55, 23, -14, 4, 19, 4, 40, -13, 14, -5, 18, 41, 13, 1, -44, -37, -21, -80, 17, -15, -9, 9, 14, -111, 18, 25, 14, 14, 24, 27, 22, 26, -6, 21, -1, 4, 43, 41, 17, -18, 24, 21, 41, -10, 19, -11, -31, 24, 2, 50, -44, 4, -6, 19, 3, -19, 0, 7, 28, 30, 1, -10, 46, -53, -29, 25, -34, 20, 20, 9, 28, -12, 15, 17, 28, -1, -12, 1, -4, -21, -18, -29, 28, 5, 5, 21, 2, 2, 5, 35, 20, 6, 27, 0, 12, 25, 9, -10, -7, -17, 42, 33, -2, 18, 22, 25, 33, -5, 17, -14, -6, 23, -13, 39, 35, -1, -49, 0, 17, -8, 2, -28, 61, 36, 23, -5, 26, -21, -33, -18, -32, 40, -1, 24, 16, -25, -1, 5, 31, -36, -15, -32, 9, -8, -18, 9, 18, -11, 25, 5, -14, 54, -33, 16, 6, -14, 18, 17, 15, 14, 6, 2, -13, 3, 10, 27, -9, 9, 20, 33, 16, 10, 23, -18, 12, 2, -22, 53, 23, -32, -12, 0, 7, -9, -15, -56, 23, 29, 19, 28, 19, -25, -11, -18, -59, 7, 29, 4, -8, -50, -16, 30, 20, -16, -27, -33, -21, -21, 3, 0, 1, 11, 6, -14, -9, 39, -39, 27, -7, -11, -2, 0, 30, 18, 14, -17, -1, 13, 23, 34, -3, 18, -7, 42, -15, -20, -25, -2, -1, 9, -68, 30, 11, -16, 23, -2, 17, -22, -2, -37, 4, 44, 36, 49, 4, -26, 23, 9, -5, -8, -16, 8, 12, -35, -4, 20, 22, 4, 0, -36, 0, 7, 17, 14, 5, 15, 23, -32, -2, 29, -27, 16, 3, 4, 0, -26, 21, 24, 14, -15, -11, 3, -16, -3, -27, 6, -6, 48, -14, 1, -9, -19, 26, -39, -30, 53, 7, -22, 40, 11, 8, 23, -48, -50, -9, 34, 9, 43, 18, -24, 13, -54, -39, -8, -13, 3, -3, -17, 13, 17, 16, -11, -5, 0, -18, -19, -3, 34, -22, 11, 36, -32, -22, 65, -22, 13, 22, -1, 24, -25, 19, 26, -9, -23, 9, 21, -13, -26, -20, 6, -16, 44, -33, -12, -6, -20, 6, -57, -22, 21, -4, -17, 19, -2, 11, 1, -41, -53, -32, 64, 28, 43, 4, -7, 1, 9, -34, -55, -5, 5, 13, -15, -3, -4, -14, 8, -1, 0, 3, -6, -15, 72, -3, -3, 0, -14, -45, 38, -14, 2, -7, -12, 51, -26, 18, 30, -20, -51, 7, 19, 7, -47, -31, 33, -26, 37, -68, -18, -17, 2, 31, -17, -7, 27, -10, 10, 0, -17, 11, 40, -35, -13, -12, 22, 9, 27, -5, -38, 15, -31, -18, -19, 9, 3, 5, -19, -16, 13, -16, 8, -7, -21, -26, 11, 21, 48, -4, 21, 61, -16, 24, 80, -42, -33, -3, -16, -12, -29, 25, -10, 22, -26, -22, 17, -12, -52, -15, 8, -11, 6, -52, 30, -25, -75, 34, -89, 7, 1, -3, -7, 9, 8, -38, -37, -24, 21, -38, -5, -5, -15, -35, -36, 20, -10, -40, 8, -18, -57, -11, -10, -23, -24, -28, -14, -7, -12, 1, 11, -13, 18, 1, 11, 17, -61, -18, 14, -12, 15, 0, -3, -6, 2, 51, 8, -15, 
  -5, -2, -3, 37, 40, -14, -54, -12, -7, 14, -8, 12, -1, -24, 21, 48, 27, 16, -2, -10, -27, -32, 33, -6, 0, 54, -42, -28, -14, -28, 19, -68, -6, 31, -16, 20, -47, -9, -22, -33, -39, -31, 0, 29, -32, 22, -13, -16, -22, -50, -8, 26, 15, 43, -2, -17, -32, -3, 9, -38, 23, -16, 14, -4, 5, -37, 4, 36, 9, -7, -50, 1, -29, 52, 6, -4, -10, 10, 27, 41, 4, 18, 10, -32, -29, -64, 1, 16, 2, 5, -4, -43, 12, 19, 34, 3, 3, 38, -2, 39, -58, -16, 21, 41, 3, -39, -12, 8, 2, 30, -8, 3, 20, -4, -12, 22, 42, 32, -13, 91, 22, 16, 34, 21, 12, -4, -26, 28, 23, -30, -7, 17, 33, -26, -17, 13, 5, 21, 6, 50, -6, 6, 21, 36, 4, 12, -25, -41, -26, -41, 17, 4, 30, 29, 46, -21, 22, 34, 18, -18, 17, 57, -52, 38, -47, -3, 22, 82, 11, -65, 25, 69, 12, -20, 15, 4, -17, -43, 34, 32, 44, 50, -13, 92, 13, 34, 43, 4, 5, -7, -29, 16, 35, -21, -7, 9, 58, -13, -20, -29, -20, -2, -30, 70, 16, -15, 7, 40, -3, 38, -7, -33, -23, -24, -9, -3, 6, 20, 86, -26, 12, 38, 45, -4, 28, 72, -51, 31, -25, 33, 43, 68, 4, -38, 11, 65, 43, -2, 2, -1, -40, -30, 32, -2, 15, 61, -62, 82, 47, 51, 20, 26, -11, -7, 13, 15, 23, -15, 0, 13, 45, 13, 15, -28, -24, 15, -41, 67, 30, -23, 29, 62, 8, 55, 25, -38, -34, -19, 2, -11, 15, 25, 71, -8, 4, 24, 39, -8, 50, 72, -26, 41, 0, 40, 75, 105, 7, -13, -31, 56, 64, -12, 1, 6, -62, -36, 46, -7, 58, 32, -62, 66, 25, 54, 53, 37, 9, -1, 32, -3, 33, -15, -8, -5, 51, 17, 5, -33, -2, 15, -30, 43, 32, -24, 36, 39, -9, 60, 9, -43, -15, -11, 10, -3, 18, 25, 56, 28, 5, 23, 52, -15, 87, 95, -2, 40, -13, 28, 54, 63, 14, -37, 24, 65, 40, -14, 16, 6, -61, -3, 12, 2, 45, 12, -55, 57, 61, 43, 43, 7, 5, -13, 16, 11, 40, -35, 2, -13, 51, -8, 8, -11, -16, 3, -18, 55, -6, -8, 33, 37, 14, 78, 3, -64, -2, -33, 28, 0, 33, 10, 37, 23, -23, 36, -1, -19, 91, 66, -22, 38, -14, 13, 59, 23, 10, -16, 36, 42, 30, 25, 29, -18, -53, -1, 2, 15, 45, 3, -38, 53, 62, 23, 40, 14, 3, -34, -22, 21, 40, -27, -14, -23, 15, -4, 10, 22, -37, -35, -11, 70, -13, -19, 21, 55, -19, 68, 32, -73, 15, -37, 22, 27, 40, 17, 34, -1, -19, 55, 30, -37, 57, 54, -17, 33, -15, -12, 27, 11, 9, -29, 71, 9, 10, 39, 11, -11, -42, -2, -8, 14, 52, 12, -62, 34, 53, 47, 25, 7, 9, -16, -21, 33, 30, -34, -7, 4, 36, -26, 2, 31, -47, -36, 6, 79, -17, -35, 24, 73, -18, 48, -3, -55, 20, -8, 19, 10, 28, 8, 38, 14, -5, 64, 44, -31, 25, 23, -9, 41, 6, -13, 3, 23, 5, -20, 47, -8, 5, 20, 39, 13, -68, -8, -2, 7, 40, 25, -46, 34, 51, 41, 1, 25, 8, -30, -9, 33, 16, 2, 9, -13, 36, -6, 27, 7, -46, 11, 37, 63, -14, -22, 5, 73, -10, 38, 23, -46, 0, -20, 18, 18, 18, -32, 43, -8, -21, 41, 30, -58, 49, 23, -29, 36, -8, -11, -11, 1, 19, -13, 26, 16, 3, 4, 29, 0, -51, -9, -3, -31, 13, 75, -60, 17, 38, 33, 32, 9, 21, -34, 16, 29, -4, -49, -19, 15, 43, -12, -19, -16, -47, -12, 46, 24, 9, -51, 65, 47, -40, 22, 9, -30, 2, -24, -13, 13, 10, 52, 16, 0, -27, 30, 16, -56, 21, 8, -14, 42, -28, -13, 5, 21, -21, -46, 2, 14, 9, -4, 25, -45, -81, -15, -9, 1, -5, 39, -10, 15, 31, -24, 18, -10, -6, -30, 10, 5, 32, -49, 12, 15, 61, 8, 17, 12, -54, 7, 23, 48, 31, -24, -30, 32, -28, 17, 18, 2, 11, -14, 0, 11, 2, 49, 8, -1, -38, 53, 24, -86, 25, 8, -12, 22, -14, -20, 15, -9, 18, 19, 13, 21, -17, -12, -4, -69, -79, -19, 7, -49, 16, -7, -24, 6, 19, 45, 49, -5, 42, -40, -25, 15, 76, -5, -21, 22, 31, -26, 17, 14, -13, -46, 24, -5, -34, -16, 6, -9, -28, -2, 15, 11, 21, 0, -16, 23, 39, 72, -21, 4, -1, -4, 2, 4, 39, 14, 32, 7, -5, -22, 13, -44, -13, -13, 5, -6, 13, 4, -3, -4, -42, -25, -22, 15, 23, -6, 22, -8, -5, -12, 17, -28, 4, -11, -27, -1, 
  21, 27, 19, -4, 3, -17, 33, 45, -16, 17, 25, 32, -44, 18, -44, -14, -12, 26, 20, 41, 35, -29, -29, 12, -2, -16, 48, -6, -38, 14, 14, -10, -10, 4, 19, -28, -9, 30, 17, -2, 7, 75, 29, 11, -11, -33, 13, -39, 15, -22, 8, -62, 35, -54, 30, 15, 8, -18, -17, 61, -20, 6, 9, -1, 34, 45, 2, 2, 28, 17, 39, 51, -28, 49, 39, 26, 4, -28, -8, 1, 21, 4, 8, 28, 29, 21, -23, 17, 2, -3, 45, 47, -43, 46, 40, -23, -27, 2, 26, -28, 74, 21, 15, -5, 8, 73, 26, -7, -8, -8, -51, -7, -42, 14, -3, -60, 27, -17, 20, -54, 4, -25, -41, 42, 3, -10, 16, 2, -4, 37, 2, -4, -14, 12, 23, 97, -31, 12, 48, 59, 24, 18, -8, -13, -18, 7, -30, 27, 31, 28, -4, 0, -8, 21, 4, 29, -86, 24, 37, 18, -51, 2, 52, -24, 49, -36, -16, -69, 12, 62, 13, -73, -16, 21, -32, -15, 21, 39, 12, -48, 65, -23, 39, -38, -25, 17, -7, 35, 20, 16, 7, 24, -5, 42, 25, -29, -25, 49, 6, 91, 1, 29, 68, 95, 42, 17, -2, -14, -24, 47, -26, 36, 51, 28, 13, 3, -9, -12, 23, 31, -42, 53, 62, 34, -45, 0, 22, -10, 23, -60, -35, -51, 17, 39, 27, -80, -56, 37, -11, -15, 20, 31, 15, -31, 71, -14, 7, -40, -12, 30, -6, 42, 47, 28, 6, 33, 12, 48, 21, -31, -12, 12, 19, 82, -3, -7, 84, 65, 35, 16, 9, 2, -32, 9, -38, 44, 44, 13, 17, 17, -37, -10, 5, 30, -15, 58, 40, 6, -19, -44, 34, -15, 16, -72, -22, -68, 14, 28, 26, -69, -36, 8, -13, -9, 32, 5, -6, -13, 29, 17, 21, -48, 39, 19, -4, 38, 40, 36, 5, 8, -14, 50, 29, -33, -27, 19, 30, 65, 1, 10, 74, 58, 16, 32, -3, 39, 6, 30, -10, 16, 41, 15, 4, 15, -19, -15, -2, -1, -19, 80, 47, 3, -73, -15, 9, -13, 28, -52, 1, -67, 14, 49, -48, -43, -25, 34, -31, 1, 46, -2, 0, 1, 44, -9, 64, -39, 21, 17, 26, 33, 40, 33, -25, 12, -45, 38, 27, -53, -17, 10, 26, 80, 0, 18, 38, 36, 4, 46, 8, 34, -30, 32, -20, -7, 48, 5, 8, 18, -24, -8, -2, 14, -10, 52, 47, 6, -77, -14, 1, 9, -4, -58, 11, -33, 21, 21, -24, -30, -13, 52, -36, 18, 11, -19, 19, -34, 57, -41, 74, -27, 22, 41, 20, 41, 38, 8, -17, 3, -30, 53, 37, -64, -47, 13, 37, 79, -42, 25, 42, 59, 0, 16, -19, 67, -17, 32, 0, -10, 27, 7, -29, -9, -9, -6, -19, 9, -1, 59, 38, 7, -64, -20, 2, 9, 10, -27, 19, -21, 7, 40, 5, -22, -8, 23, -26, 16, 25, -36, 8, -37, 41, -31, 68, 0, 29, 57, -1, 43, 35, 30, -15, 27, -2, 15, 9, -13, -46, -9, 30, 69, -41, 41, 12, 56, 4, 10, -13, 34, -9, 32, -13, -17, 52, -11, -30, -5, 18, -19, 3, -2, -41, 83, 29, 5, -55, 2, 16, -11, -2, -31, 17, -7, -10, 15, 1, -16, 5, 52, 26, 8, 14, -20, -3, -41, 43, -19, 60, 6, 5, 15, -17, 35, 35, 17, -33, -21, -8, 28, 11, -11, -23, 0, -4, 59, -24, 18, 29, 63, -19, 5, 0, 50, -8, 41, 13, -34, 20, -30, -45, -19, 33, -13, -7, 29, -53, 52, 15, -43, -40, 7, 24, -31, -5, -36, 13, -28, -2, 20, 19, -26, -13, 42, 21, -5, -10, -38, -17, -25, 39, -2, 72, -4, 17, 43, -11, 33, 22, -13, -28, -5, -7, 51, 3, -2, 2, -31, 16, 29, -54, 6, -7, 47, 30, -27, -10, 25, -24, 43, 24, -31, 35, -14, -30, 4, 33, -35, -28, 5, -35, 31, 18, 14, -108, 25, -12, -9, -2, -58, 22, -41, 34, 12, 3, 29, 0, 23, 7, -6, -33, -17, -12, 1, 22, 16, 41, 5, -33, 34, -19, 6, 53, 18, -36, 12, 25, 7, 33, -7, -31, 2, 8, 77, -28, -19, -24, 21, 2, 66, 8, 35, -50, 34, 9, 16, 21, -15, 16, 2, 41, -17, -39, 2, 25, 44, 6, 16, -17, 29, 26, -21, -23, -24, -15, -34, 16, 23, 26, -8, -35, 30, 23, -27, -2, 15, 13, -31, 30, -19, 3, -16, -1, 25, -19, -16, 28, -20, -8, 24, -21, 46, 3, 18, -1, 10, -25, 0, -19, -20, -32, -24, 34, 27, 28, 18, -38, 34, 9, -6, -23, -27, 20, -8, 9, -13, 15, 22, -2, -21, 15, 4, -19, 0, 14, -32, -3, -5, -6, -23, 12, 14, 1, -60, -9, 1, 61, 40, -25, 21, -9, -20, 31, -6, -6, -1, -14, 0, 30, -1, 37, 0, 2, 6, 
  13, 14, -21, -14, 4, 1, -1, -46, -4, 6, 6, -23, 38, 18, 38, 27, 14, -13, 4, -77, 2, -14, 24, -31, -11, 40, 18, -24, -9, -16, -8, 28, -44, -13, -22, -8, -5, -4, -6, 14, -33, -62, -51, -19, -8, 18, -18, -8, -23, 18, -5, 17, -43, 24, -10, -36, 23, 17, 2, -36, 31, -16, -12, 6, -9, 8, 14, 5, 7, 8, 7, 14, -10, 0, 40, -6, 3, 2, -8, 4, -10, -13, 12, -36, 27, 10, -22, -4, 1, 65, -22, 9, -67, -22, 14, 39, -24, 12, 22, -24, -2, 40, -3, -9, -6, -12, -40, -11, 21, -36, -17, -9, -21, 27, 6, -19, 20, 7, -11, -33, 24, -11, 6, -17, 18, 25, -18, -18, 0, -11, 5, -8, -4, 11, 23, -51, 2, 22, 22, -16, 29, -11, 8, 2, -17, -12, 21, 30, 10, 27, 12, 12, 1, 57, -29, -3, -40, -22, -38, -7, -4, -2, -4, -12, -3, 86, 35, 25, 13, 9, -2, 21, 4, -7, -9, 7, 3, 10, 33, 12, -42, 12, 7, -6, 19, 32, -14, -2, 15, 8, 17, -9, 22, 4, 19, 13, 18, 46, 21, -13, -5, 19, 26, -52, 36, 19, 7, -11, 8, -12, 3, -12, 58, 40, 23, 16, 24, 71, -16, 15, 6, -56, -41, 17, -9, -13, 2, -26, 2, 45, 49, 29, 33, 6, -52, 16, 27, 8, -16, 8, -4, 37, 33, 10, -36, -1, 11, 29, 5, 26, 6, 2, 21, 14, 25, -31, 32, 14, 42, 29, 31, 26, 45, -29, 20, 20, 3, -36, 37, 32, -23, -51, 35, -5, 6, -24, 24, 32, 16, 32, 21, 63, 8, 27, 13, -56, 11, 27, -5, -16, 12, -5, 6, 48, 48, 49, 43, 10, -68, 20, 21, 8, 16, 24, 6, 26, 33, 8, -15, -32, 0, 32, 6, 32, -10, 33, 6, 22, 22, -33, 9, 22, 23, 50, 8, 37, 43, -4, 40, 31, -28, -55, 31, 16, -17, -72, 34, 33, -27, -13, 29, 42, 27, 22, 1, 48, 26, 44, 28, -54, 61, 18, -30, -42, 7, -51, 4, 11, 26, -7, 35, 18, -54, -27, 17, 27, 15, 38, -1, 36, 26, 1, 23, -39, 36, 20, -9, 3, -10, 27, 13, 33, 18, -28, 11, 17, 23, 27, 1, 3, 22, 5, 17, 19, -38, -36, 6, 25, -23, -43, 33, 27, -8, 2, 1, 7, -15, 10, 6, 50, 9, 28, 35, -4, 72, 30, -36, 5, -15, 31, -9, 15, -3, 1, 39, 4, -30, -21, 22, 9, 15, 53, 23, -10, -7, 23, 39, -89, 28, 20, -24, -19, -18, 18, -5, -22, 3, -19, -4, -2, 4, 76, -28, -37, 18, 31, 39, 3, -6, -14, -27, 22, -34, 4, 37, -17, -5, -27, 11, -17, -4, -3, -9, 17, 48, 19, 27, 2, 73, 35, -13, -11, 0, 60, -13, -8, -10, 18, 19, -11, -2, -17, 6, 14, 13, 73, 2, -6, -21, 55, 35, -34, 21, 37, -18, -23, -13, 3, -35, -8, -31, -32, -8, 13, -27, 14, -61, -38, -8, 42, -12, -11, -11, 17, -34, 23, -37, 22, 37, 1, -35, -29, 31, -11, -44, -25, -12, -1, 35, -20, 27, 47, 41, 23, -12, 16, 0, 77, -12, -12, -21, 27, -33, -48, 5, -25, -3, 20, -3, 46, 20, -55, -40, 38, 25, -10, 29, 39, -13, -27, -2, 3, -24, -27, -31, -7, -46, 10, -10, -7, -56, -34, -1, 53, 21, 6, 19, 15, -39, -59, -5, -3, 37, -10, -13, -5, 33, -20, -77, -23, -23, -25, 7, -15, 10, 63, 32, 22, -35, -12, 5, 38, -31, -15, -15, 10, -35, -39, 1, -21, -42, -7, -18, 20, -35, -66, -50, 11, -4, 3, 25, -21, -28, 2, -16, -9, -45, -56, -26, 0, -23, -31, -33, 3, -60, -3, -31, 40, -21, -10, 27, 42, -46, -23, 9, 16, 7, 0, 18, 6, 47, -26, -68, -53, 0, 5, 30, -67, -1, 39, 28, -18, 10, -24, -8, 34, -42, -22, -41, -6, -42, -54, 1, -9, -43, -1, -11, -18, -37, -33, -58, -3, 15, 13, 14, 4, -36, 9, -14, 3, -7, -84, -8, -18, -22, -13, -57, 10, -37, -40, -30, -33, -34, 3, -4, 14, -92, -41, -8, 6, 2, 5, 26, -19, 41, -62, -42, -32, 15, -37, 20, -16, -4, -19, -3, -64, 0, -8, 5, 27, -43, -35, -72, 2, -41, -30, 16, -36, -1, 24, 1, -33, -85, -48, -80, -9, 12, 3, -27, -52, -36, 3, -49, -4, -22, -65, -40, -12, -77, -48, -22, 10, -13, -44, 5, 15, 11, 29, 1, -79, -43, 34, 28, 10, 57, -10, 14, -3, 22, -18, -9, -45, -7, -7, -8, -1, -12, 7, 13, -10, 59, -9, 6, 11, -32, 0, -29, 17, -54, -31, -2, -1, -9, -14, 13, -9, -49, -38, -79, -9, 15, -24, -98, -34, -9, -41, -19, -27, -7, -32, -24, -15, 
  -18, -12, 3, -28, 9, 20, -14, 7, 23, 9, -3, -7, -14, 4, 12, 0, -19, -20, 6, 1, 2, -35, 7, -7, -25, 1, 2, -13, 9, -17, -32, -8, 29, -9, 37, -8, -17, -17, -14, 0, 10, -15, -13, -26, 7, -11, 13, -7, -12, -7, -14, -15, -37, -15, -45, 10, -5, -4, 7, -11, -5, 22, -1, 11, 7, 1, -9, -8, -8, 0, 9, -10, -3, 8, -6, -7, -7, -10, -25, -15, -23, -18, 14, 7, 28, -31, -17, 1, -4, -22, 15, -9, 3, -10, -15, -27, -5, -31, 21, 11, -5, -34, 8, -2, -22, -1, -8, 5, -23, -3, -14, -1, -20, -18, 2, -32, -6, -8, -10, -11, 4, 9, 4, -22, -3, 21, -3, -18, 6, -6, 10, -33, -2, 10, -4, -11, -20, -9, -2, -25, 11, -27, -3, 5, 0, -14, -8, -11, 32, 30, -15, -10, -13, -11, 1, 11, 8, -19, -10, 2, 26, -10, 44, 9, 1, 27, -10, -10, 4, -26, -15, -2, 11, -40, -5, -9, -10, -12, -6, -16, -36, -4, -16, -17, -27, -23, -15, -19, -1, -10, 24, -15, -25, -8, 2, -15, -9, -2, -19, -8, -5, 19, 33, -42, 2, -18, -12, -11, -13, 1, -6, 26, 11, 15, -17, -6, -31, 4, 24, -29, -9, -33, 5, -17, -12, -25, 6, 2, -5, 6, -23, -16, -9, -17, -7, -7, -14, 1, -25, 3, -21, -28, -18, -19, -10, -20, 5, -29, -30, -14, -10, -1, -24, 21, 4, -3, -23, 36, -19, -31, -20, 9, -16, -13, -6, 24, -21, -12, -8, -27, 8, -15, -14, -12, -3, -17, 35, 29, -3, -9, -28, 18, 17, -18, -38, 18, 2, -38, 1, -30, 16, 3, 3, 5, -14, -7, -37, -27, -11, 0, -3, 20, -45, -21, 3, 1, -12, -43, 4, -14, -4, -11, -37, -12, -28, -18, -10, 0, 10, -18, -30, -27, -26, 3, -11, 13, -28, 15, -21, -42, -20, -17, -17, -49, -33, -9, -22, 24, 3, -12, -11, -22, -12, -7, 15, 4, -15, -45, -14, -15, 17, -32, 3, -5, 10, 11, -26, -6, -10, -1, -27, 5, 18, -7, -6, -14, -14, -29, -23, -4, -32, -28, -6, -32, -22, -16, -30, 8, -25, -15, -21, -14, -26, -36, -16, -35, -5, -7, -11, 0, -1, -14, -29, 24, -16, -5, -16, 3, 23, -21, 24, 11, -16, 4, -26, -16, -38, -16, -11, -26, -5, -4, -13, 2, -36, -39, 16, 0, -27, -34, -11, -2, -10, -3, -6, -23, -17, -11, -18, -11, -25, 0, -18, 15, -13, -8, 11, -8, -16, 1, 25, -13, -5, 0, -4, 3, -20, -9, -32, 9, 7, 24, -5, -3, -26, -10, -11, 11, -9, 15, 4, 18, -14, -32, 15, -39, -34, 19, 9, 10, 18, 1, -9, -5, 44, -25, -16, -12, -36, -1, 7, 4, -27, -31, -38, -24, 11, 2, 13, -4, -51, -7, -7, 13, 13, 8, 24, 1, 16, 24, -15, 8, 2, 31, -12, 1, 2, 17, -11, 1, -16, -5, -26, 6, 16, -34, -41, -5, 35, 19, -27, 24, 14, 14, 28, 16, -4, -29, -13, -9, -29, 5, -21, 9, -18, -14, 0, -6, -22, 28, 9, 5, -25, 26, -29, -28, -31, -34, 8, -9, 7, 31, 21, 11, -31, 0, -55, -14, -16, -1, -2, -12, 2, -11, -9, -14, 8, 14, -2, 14, -34, 44, -6, 9, -2, -28, 18, -24, -14, -4, 26, 2, -11, 8, 11, 6, -21, 1, 10, -22, 30, 41, 5, -17, -8, 18, 5, -12, -6, -6, -3, 35, 18, -4, 28, 22, -27, 6, -11, -5, 11, -8, 14, 6, -16, 12, 0, 26, 4, 21, 7, 20, -19, -18, 8, -3, -9, -9, -53, 8, -12, 9, -15, 6, 6, -17, -1, 8, 12, 17, -12, -8, 11, -27, -7, -12, 15, -13, -3, -15, -20, -10, 3, 4, 4, -34, -23, -37, 12, 10, 13, -25, 1, 15, -1, 15, 13, -23, 2, -41, 7, -7, -15, -15, 29, -6, 1, 28, 10, 46, -10, 34, 19, 23, 2, -13, -21, -4, -21, 20, 3, -7, -7, 16, -1, -10, -17, 7, -3, 16, -8, 15, 30, 6, -28, 3, 0, -28, -1, 13, 27, 7, -1, -16, -36, 1, 5, 26, 0, -3, -12, 23, -14, -15, -55, -9, 17, -1, 14, 10, -35, -9, -13, 4, 7, 8, 12, 8, -25, -21, 19, 35, -24, -5, -8, -4, -9, -4, -31, 23, 8, 19, 4, 12, 18, -4, -7, -4, -28, -28, 12, -30, 15, -36, 33, -21, -27, 18, 15, -22, -11, -1, 7, -16, -33, -30, -26, -16, -13, -14, -17, -9, -28, -5, -7, 8, -50, 12, -33, -26, -16, 13, 16, 8, -63, -2, -10, -10, 29, -1, -6, 13, -28, -26, -22, -46, -8, -12, 2, -41, 14, -4, -19, -16, -12, -8, 8, 7, 17, 4, -3, -34, 5, 14, -5, -36, -34, 6, -4, -8, 12, -5, 
  8, 7, 11, 3, -1, 0, -7, -13, 7, -2, -6, -11, -5, -2, -12, -13, -3, 2, -1, -6, 11, 4, -14, -6, -9, -19, -11, 0, 2, -13, 5, 6, -2, -12, 5, 4, -15, -5, -2, -6, 6, 7, 4, -9, 0, -9, -8, 5, -8, 9, -5, -15, -16, 4, -16, -10, -7, 6, 5, -7, 3, 4, -1, 6, 7, 9, -5, -7, -12, -16, -12, 7, -12, 1, 8, 2, 4, 3, 7, -8, -5, -6, -8, -15, -16, -7, 3, 3, 4, 10, 10, -11, 5, 12, -17, -4, -14, -20, 9, -20, -5, 0, -16, -1, -10, -9, -9, 8, 1, -17, 3, 0, -6, 5, 6, 5, 6, -13, -2, -4, -9, -1, -11, 5, -6, -14, -8, -6, 3, -5, -10, -13, -17, 8, -13, -4, -2, -2, -2, 12, 0, 7, -6, -1, -5, -13, -15, -13, 5, -11, 1, -16, -13, -6, -12, -5, 1, -12, -11, 0, -19, 3, 8, -18, -8, 9, -11, -15, -2, -8, 8, -16, 1, -7, -2, -7, -7, 1, 0, 5, -12, -9, -1, -12, 8, -15, 0, -3, -4, -10, 12, -9, 8, 10, -7, -7, 2, -15, -10, 7, -14, -15, 12, -1, -11, -14, -1, -1, -17, -7, -1, -3, -11, -8, -3, -11, -3, 4, 6, 9, -10, -4, -5, -4, -17, 0, -12, -4, -8, -5, -8, -6, -16, -7, -12, -14, -9, 7, 4, -7, -14, -1, 7, 7, 0, 5, -12, 11, 9, -5, -19, -9, -15, 1, -8, -4, 2, 4, -2, 8, -13, 3, -5, -2, -5, 11, 3, -3, 0, -2, -5, -13, -11, -10, 9, -1, -11, -14, 6, 11, -10, -10, -12, 2, 6, -4, -13, 5, -4, -5, 8, 9, -12, -10, -10, -11, -18, -16, 0, 1, 12, 8, -1, -14, -15, 0, -11, 7, -4, 2, -15, -5, -15, -14, -13, 9, -13, -11, 3, 1, -17, -8, -13, -15, 2, -13, 9, -6, -1, 9, 4, -16, -2, 4, -12, 0, -8, 5, -14, -4, -1, -13, -4, -14, -4, -7, 12, 5, 8, -15, -4, 4, 4, 5, 2, -2, 1, 4, -3, 7, -14, 3, -12, -6, 4, -8, 1, -11, 11, 4, -10, 7, -8, 0, 7, 3, -11, 9, 5, -13, -12, -2, -14, 0, 6, -18, 10, -1, -4, -2, 0, -14, -8, -6, -18, 10, -6, 7, 10, -12, -12, -13, -9, 7, -12, -12, -9, -9, 1, 7, -9, 3, -9, -5, -14, 7, 7, -4, 6, 9, -7, -17, -10, 1, -12, 3, -17, 9, 3, -6, -2, -2, 4, 0, 0, 3, 4, 9, 5, 9, 9, -7, -11, -2, -3, -17, -2, 0, 7, 11, -14, 10, -3, -12, 10, 11, 7, -13, 4, 3, -5, -3, -3, 1, 9, 8, -13, 8, 1, 3, -16, -13, 5, 11, -3, 10, -13, -15, 0, 4, 3, 0, -11, -12, -3, 1, -5, -13, 1, -10, -1, -16, 9, -2, -4, -15, -6, -3, 7, -8, 4, -13, -12, 1, -10, 11, -1, -11, 5, 3, -4, -16, -15, 0, -15, -17, 2, -14, -3, 4, -1, -7, 8, -1, -3, 10, 2, -19, -7, 0, -2, -5, -5, -16, -9, -15, -8, 1, 11, -3, 9, 7, 9, 8, -16, 11, 3, -7, 4, -4, -8, -9, -15, 10, -14, -8, -10, 0, -6, -7, -8, -12, -13, 4, 1, 11, -6, 8, -10, 6, -7, -6, -9, -3, 3, -8, -12, -12, -2, 3, -6, -1, 5, -4, -13, 0, 13, -10, -8, 10, 9, -1, 11, -15, -16, 2, 3, -1, 10, -12, -4, -9, 1, 3, -7, 0, -6, 4, -8, 9, -2, -16, 2, 6, -4, -9, -13, -12, -6, -15, -7, -9, -16, -15, -13, -5, -18, 7, -20, -10, -7, 1, -12, -9, 7, 3, 9, 1, -6, -14, -16, -1, -1, -7, -9, 6, -4, 9, 8, -14, -4, 6, -2, -12, -9, -14, -5, -6, -19, 5, -8, -14, 1, 1, 3, 4, 10, 0, -4, -1, 0, -13, -4, -16, 4, -1, 0, 11, -17, 4, -16, -3, -5, -10, 5, -19, -1, 9, -12, -3, 7, -13, -17, 1, -8, -2, -13, 10, -13, -7, -13, 7, 9, -1, -4, -4, -9, -12, 9, -12, -15, 6, -8, 8, -5, -4, 0, 1, -16, 5, 4, 3, -17, 7, 5, -14, 12, 4, -10, -2, 9, -4, 5, 3, -10, 4, 3, -6, 7, 3, 12, 3, -3, -13, 3, 12, -6, -3, -1, 3, 4, 10, 7, -12, -14, -15, -18, -14, -6, -11, -12, 1, -13, 7, 9, -13, -13, -11, -13, 0, 7, -11, 4, 6, 5, 12, 10, -7, -14, -3, -16, -5, 9, -9, -1, 4, -1, -9, 3, 8, -7, 2, -3, 1, -1, 7, 4, 10, 7, 5, -2, 9, 3, 10, 8, -10, 2, -14, -2, 1, 3, 11, 11, 1, -13, -12, -2, -14, 5, 7, 5, -18, -12, 0, -12, -15, 11, 1, -15, -7, 13, -2, 
  -1, 45, -4, 8, 2, 32, 74, 7, -26, 40, 51, 40, 29, -8, -36, -6, 1, -10, 24, 60, 58, -9, 13, 25, 45, 0, 29, 28, -29, 60, 10, 11, 18, 5, 62, 11, 66, 1, 41, 31, 40, 36, -11, 1, 35, 21, -10, -2, -3, 27, 26, -50, 36, -22, -15, 24, 46, 18, 21, 52, -2, 23, 16, 2, -38, 40, -5, -19, -67, 9, 65, 13, -45, -11, 50, 42, 15, 21, -37, -29, -1, -3, -1, 66, 25, -23, 18, -22, 18, -87, 32, -21, -2, -29, 9, 5, -6, 21, -16, 17, 23, -6, 5, 9, 20, 13, -2, 8, -38, -3, -17, 10, 9, 2, 11, -23, 12, -1, -32, 35, -5, 22, -11, 21, -4, -34, 14, 8, -32, 31, -38, -19, -38, -11, 34, 31, -26, 35, 46, 39, -37, 10, -47, -32, 54, -2, 23, 50, 10, -26, 33, 23, 9, -48, -2, -26, -51, -15, 5, -1, -21, -1, 3, 3, 17, 18, -7, -6, 38, 37, -49, 40, -26, 41, 23, 22, 57, 18, 10, 0, 25, -30, 47, 1, 30, 43, -4, 37, 2, -24, 10, 0, -25, 16, -4, 0, -37, -31, 48, 35, -55, 26, 23, 27, -59, 18, -29, -72, 31, 12, 8, 46, 42, 6, 36, 37, 11, -17, 2, -8, -13, -40, 20, 6, -43, -7, -5, -25, 23, 9, -19, 56, 46, 22, -46, 36, 12, 6, 32, 39, 17, -5, 38, -4, 42, -54, 35, 2, 56, 29, -23, 46, -11, -14, 25, 22, -10, 20, -30, -14, -30, -12, 44, 29, -25, 36, 7, 23, -26, 18, -24, -80, 35, 18, 18, 32, 25, 14, 32, 48, 30, -7, -15, -17, -2, -55, 3, 6, -44, 2, 3, -38, 31, 30, -22, 93, 29, 35, -34, 115, -1, 18, 28, 15, 44, 13, 20, 10, 3, -37, 32, 28, 40, 47, 2, 53, -1, -23, 27, 43, -8, 6, -26, -30, -5, -17, 29, 28, 18, 53, 25, 32, -12, 11, -47, -74, 35, 30, 25, 19, 5, 3, 55, 53, 36, 4, -27, -11, -4, -51, -44, 31, -58, -13, 10, -52, 54, 23, 2, 56, 40, 17, -12, 58, -9, 8, 12, 18, 48, -8, 38, 20, 12, -28, -30, 15, 48, 25, -21, 29, -12, -20, 64, 37, -30, 3, 5, -12, -28, -22, 36, 19, 0, 69, 48, 36, 15, 20, -28, -31, 18, 20, 18, 38, -1, 27, 47, 41, 35, 38, -20, -21, -2, -40, -5, 26, 7, -6, 15, -65, 49, 22, -12, 34, 43, 14, -4, 53, -9, 40, 13, 21, 52, 23, 19, 44, 14, -11, 1, -21, 34, 31, -5, 20, -5, -16, 44, 50, -42, 36, -2, -30, 1, -3, 27, 16, 11, 51, 56, -4, 30, 37, -37, -25, 46, 23, -3, 50, 30, 38, 63, 31, 27, 16, -40, 5, -3, -19, -15, 22, -21, 2, 24, -31, 47, 7, 9, 27, 37, 35, 17, 37, -26, 10, -8, 49, 63, 16, 24, 38, 13, -6, -9, -10, 52, 22, -8, 18, 4, -6, 37, 36, -64, 39, -22, -48, -14, -20, 10, 2, 18, 56, 25, 21, 16, 17, -43, 2, 49, 13, 10, 29, 12, -13, 58, 31, -4, 13, 1, 1, -7, -43, -9, 16, -15, 15, -13, -64, 35, 22, 8, 3, 49, 10, 6, 27, -32, 35, -12, 27, 72, 2, 46, 36, 22, -25, 22, 14, 43, 28, 3, 17, -5, -17, 51, 20, -52, 24, 10, -34, -32, -14, 26, -23, 4, 14, 38, -15, 11, 28, -38, 0, 47, 21, 20, 31, 11, 34, 73, 34, -1, 1, 0, 7, -18, -58, -22, 18, -30, 12, -13, -19, -8, 25, 6, 29, 7, -2, 8, 0, -50, 5, -19, 35, 83, -22, 13, 35, -2, -14, 18, 12, 38, 4, 13, 4, -33, -18, 58, 35, -36, 19, -20, -6, -23, 20, 15, -51, 10, 25, 10, -3, 8, 12, 8, 6, 28, 15, 16, 8, 24, 7, 41, 18, 0, 37, -6, -8, -43, -59, 8, 0, 21, 3, 27, -17, 13, 9, -3, -11, 15, -13, 9, 10, -7, -2, -4, 26, 68, -23, 28, 27, 4, -2, 7, 18, 22, 8, -15, 30, -21, 13, 33, 9, -20, -3, -20, 17, -47, -17, 27, -39, -45, 20, -3, 31, -11, 12, -9, 31, 36, 1, 29, -43, 10, 16, 23, 9, 3, -3, -18, -15, -35, -16, -13, -34, 48, -3, -7, -9, 13, 52, 38, 4, -2, 24, 2, 18, 22, 4, 13, 3, 80, 7, -26, 3, -10, 25, -21, 8, 25, -6, 19, -15, -23, -22, 20, -2, -23, -14, 33, 29, -10, 11, 33, 15, 19, 1, 7, 9, -15, -37, 14, 13, 45, -8, 13, -2, 14, 1, -12, 14, 28, -30, 15, 6, 20, 7, 43, -3, 27, 17, 26, 37, 4, 20, 23, -10, -10, 21, 25, 2, -6, -12, 26, 13, -3, -3, 45, -13, 21, 15, -31, 16, 1, 14, 10, 5, 0, -34, 15, -5, 
  38, 12, -1, 7, 17, 84, -29, 16, -18, 13, 21, -9, 5, 9, 4, 23, -22, -30, 0, 17, 33, 2, -1, 32, 19, -25, -1, 4, -17, 31, -6, 9, -7, -10, -11, -3, 47, 25, -18, 24, 47, 26, -30, -27, 41, -44, -13, 7, -28, 27, 26, 20, -9, 16, -9, 6, 14, -6, 6, 19, -18, 11, 22, 25, 28, 31, 34, -4, 7, 51, 31, 15, 10, 5, -39, -3, 51, -33, 18, 16, 19, -19, 57, 4, 40, 44, -4, 43, 0, 28, 11, 51, -8, 52, 12, -63, -6, -1, 15, 18, 30, 23, 1, 14, 8, 44, -8, -1, -3, -48, 16, 14, -21, -5, -2, 8, -6, 13, -29, -15, 27, -16, 4, 3, -24, 14, 12, 40, 27, 23, 12, 11, 10, 33, -13, 6, 13, 12, -16, -24, 8, 14, 4, -9, 16, 8, 38, 7, 37, -10, -15, 42, 24, 45, -9, 31, -13, 40, 9, -42, -8, -14, 39, 10, 35, -3, -2, 26, 26, 39, -18, 8, 17, -25, 41, -7, -45, 35, -29, -28, 4, 3, -65, 3, -36, -20, -3, 11, 6, 14, 1, 17, 34, 33, 35, 16, 13, 34, -11, 32, 10, 1, -2, -5, 13, 6, 26, -14, -3, -6, 42, -31, 44, 23, -24, 24, 8, 57, -19, 53, -21, 88, -3, -14, -10, 7, 50, 19, 13, 6, 9, -12, 29, 46, 12, -21, 48, -34, 12, 7, -17, 9, -18, -13, 16, -32, -52, -6, -19, -27, 13, 13, -3, 23, -27, 25, 28, 45, 5, 23, 12, 37, 2, 31, 11, 28, -9, -5, 11, -2, 24, -15, 20, -29, 14, -22, 39, 13, -12, 9, 30, 35, 30, 54, -11, 52, -3, 4, -6, 32, 67, 26, 12, -11, -19, -1, -6, 20, 11, -3, 18, -22, -22, -17, -14, 17, -21, -7, 37, -23, -57, -18, -9, -11, -12, 18, 7, 37, 9, 8, 39, 24, 16, 1, 30, 44, -10, 49, 10, 21, -13, -24, -10, 0, 27, -25, 30, -24, -2, -42, 24, 7, -13, 10, 32, 55, 4, 46, -23, 3, -36, -4, 6, -13, 65, 19, 6, 8, -8, -24, 14, 50, 7, -18, 28, -18, -16, -18, -22, 9, -29, -7, 10, -46, -9, -30, 6, -12, 17, 7, 26, 29, 4, 18, 51, 41, 2, -8, 45, 35, -11, 55, 12, 3, -61, -11, -16, 2, 22, -13, 38, 12, 2, -39, 17, 24, -19, 10, -1, 49, 21, 67, -1, 30, -24, -8, 1, -9, 70, 17, 1, 8, -12, 11, -1, 40, 19, 4, 53, -28, -17, -8, -21, 6, -35, -3, -6, -24, -38, -9, 21, 19, 18, -2, 17, 32, 16, 18, 60, 23, -14, -10, 47, 45, -25, 79, 26, 12, -10, -18, 17, 30, 11, -10, 29, 11, 29, -60, 20, 6, -26, 12, 18, 44, 0, 67, -25, 11, -15, 20, 13, -2, 84, 33, 14, 14, -8, 7, -11, 29, -2, -3, 27, -12, -20, 1, 7, 20, -38, -13, 4, -24, 0, -19, 9, -12, 23, -19, 13, 43, 24, 31, 59, 5, -32, -38, 40, 30, -32, 56, 31, -13, -9, -18, 0, -8, 43, -5, 4, -1, -6, -54, 44, 22, 6, -5, 6, 77, 24, 34, -35, 48, -37, 11, 4, -28, 65, 46, 14, 14, -8, 7, -14, 48, -10, 14, 38, 1, 9, -8, -19, 1, -55, -4, 4, -19, -29, -27, 22, -29, 20, -7, 10, -4, 37, 29, 59, 32, -1, -22, 42, 20, -23, 56, 3, -21, -24, -23, -31, 13, 12, 2, -13, -27, 2, -46, 26, -14, 36, -18, 2, 66, 23, 50, -30, 27, -7, 2, -5, -41, -5, 3, 11, 9, -20, -2, -18, 42, -3, 0, 27, 7, -23, 14, 45, -38, -35, 26, -5, -9, -34, -27, 19, -4, 18, 11, -8, 15, 32, 14, 97, -2, 43, -35, 67, 32, -44, 56, 10, -16, -30, -34, -14, -10, -10, -23, 2, -30, 32, -76, 32, 4, 3, -17, 13, 97, 11, 9, -27, 10, -10, 0, 14, -39, 42, 35, -7, -1, -5, 6, -5, 27, 10, 12, 10, 1, 20, -11, -14, -17, -49, 13, -16, -23, -69, -21, -8, -65, -9, -39, -46, 9, 27, -22, 24, -34, -33, -4, 32, 18, -32, 22, 20, 15, -16, -29, -33, -20, 1, -13, -4, -16, -2, -61, 11, -17, 37, 27, 2, 61, 4, 27, -28, 13, -17, -18, -4, -15, 25, 33, -11, 10, -81, -2, 11, 45, -2, 19, 5, 18, 1, -24, 15, -20, -11, 32, 1, 10, -80, -31, 7, -37, -10, -5, -6, 56, 14, 4, 13, 12, -36, -10, 31, 4, -58, 49, -11, 61, -14, -19, -60, 7, -3, 0, 58, 13, 36, 9, -6, -8, 0, 31, 18, 23, -20, -10, -14, 55, 6, -34, -15, -37, -34, 19, 1, 9, -55, -14, 11, 11, 14, -17, -26, 12, -23, -35, 56, -11, -21, 15, -4, -27, 21, -40, 12, 42, -56, -4, 6, 0, -14, 19, 
  -8, 20, -59, 18, -55, -56, -50, -9, -68, 3, 22, -44, 4, -77, -23, 15, -19, -12, 8, 6, 13, 11, -44, -29, -2, -2, -1, -14, -23, -15, 15, -23, 6, -3, 25, 3, -27, -37, 32, 21, -69, -23, 21, 0, 10, -20, 7, -44, -44, -31, -63, -26, -11, 6, 10, -18, -37, -73, -30, -49, -8, -30, 4, -73, -67, -45, -63, 40, -56, -65, -61, -24, -12, 14, 46, -20, -34, -38, 7, 3, -5, -4, 28, -5, 4, -16, -20, -8, 17, -54, -27, 25, 20, -29, 30, -1, 9, -15, 66, 3, -25, -5, -70, -2, -24, 13, 2, -13, 1, -35, -12, -36, -35, 5, -41, -36, 19, -6, 25, -48, -47, -55, -46, -2, -83, -48, -32, -35, -12, -46, -73, 20, -37, -70, -92, 3, 36, 21, -4, -1, -54, -77, 8, 7, 3, 3, 1, -38, 66, -59, -5, -34, 14, -7, -30, 59, 3, -10, 5, -5, -2, 20, 22, -4, -29, -64, -44, -42, -26, -26, 17, -1, -20, 2, 7, -96, 2, 25, -46, -2, 14, 3, 8, -51, -46, -12, 19, -45, -18, -2, -82, -31, 35, -91, -77, -3, -45, -88, -106, 11, 32, 2, -15, 26, -70, -46, -15, 35, -39, -24, 32, -32, 39, -88, -10, -21, 25, -4, -22, 43, 16, -49, 9, 22, -29, 13, 2, -15, -100, -61, -26, -24, -39, -45, 3, -56, -7, 5, -71, -75, -21, 31, -42, 9, 3, 1, -8, -50, -42, 32, -14, 15, 78, -10, -30, 22, -11, -86, -39, -7, -1, -50, -87, -22, -2, -21, 4, 30, -43, -8, 2, 42, -12, -69, 3, -27, 18, -46, -17, -12, -43, 1, 23, 4, 19, -62, 12, 8, -29, 19, 7, -13, -64, -57, -25, -8, -34, -20, -37, -63, -9, -23, -38, -34, 11, -13, -34, 36, -8, 59, -10, -31, -23, 43, -4, 0, 44, 1, -14, -28, 4, -11, -2, -5, 30, 2, -5, -35, -28, 25, 3, -43, 3, -2, 20, -9, -10, -55, -6, -39, 2, -21, 4, 34, -30, 29, -31, -22, -21, -72, -15, -28, -35, -17, 17, 17, -5, 16, 14, 6, 5, -1, -4, 32, 4, -25, -49, -17, 8, -10, -5, 23, -64, 30, -12, -9, -15, 32, 7, -9, 27, -5, -3, -17, 40, -2, 1, 8, 37, 7, 12, -39, -22, 32, -11, -55, 40, 10, 31, -25, -8, -20, -7, -4, 20, 6, 13, 17, 18, 49, -36, -11, 8, -51, -30, 16, -20, -19, 42, 5, -12, 18, 28, 48, 25, 12, -28, 22, 9, -3, -17, 3, -7, 12, 5, -7, -53, 6, 10, 6, -18, 34, -16, -9, 44, 27, 16, -32, 42, 18, 18, -18, 48, 27, 19, -57, 18, 48, 16, -54, 47, 12, 2, -95, 17, 7, -4, 40, 7, 27, 13, 0, 11, 73, 15, -7, 37, -85, -27, 15, 12, -27, 42, -60, 5, 43, 32, 23, 16, 19, -48, 33, 33, -11, 6, 7, -31, 30, 30, -35, -11, -55, -14, 5, -19, 27, -1, 6, 18, 17, 29, -20, 49, -13, 4, 8, 32, 19, 29, -27, 42, 70, 15, -52, 37, -9, 10, -50, 34, 8, 7, 31, 16, 13, 12, 21, 4, 70, 52, 23, 61, -34, -13, 29, 9, -27, 27, -48, -1, 62, 25, 26, 36, -1, -63, 21, 41, 8, 16, 13, -2, 33, 9, -7, 12, -46, -17, 8, -7, 3, 3, 1, -7, 24, 8, -6, 25, -29, 2, 19, 0, -24, 10, -5, 32, 23, -11, -18, 2, -72, -11, -4, 23, 20, 4, 18, 20, -16, 1, 8, -7, 32, 13, -12, 20, -11, 17, 9, 14, 18, 9, -61, 2, 20, 41, 31, 33, -32, -4, 19, 23, 5, 0, -16, -31, 0, -3, -4, 32, -23, -39, 29, -14, -13, 4, 6, -2, -13, 0, -11, -22, -16, 3, 18, -46, 30, 4, -2, -51, -20, 20, 30, 19, -44, -45, 46, 20, 9, 6, 5, 7, 20, -64, 28, -9, 21, -10, 13, 2, -25, 46, -18, -51, -15, -12, 4, -6, 29, 2, 19, 11, -13, 13, -11, -20, 14, -22, -17, -54, -29, 1, -20, 27, 27, 16, 37, -5, 6, -44, 5, 17, -46, -6, -14, -39, 2, 5, 0, -14, 15, 46, -3, -34, -9, -1, -19, 20, -41, -22, 31, 23, 20, -17, -17, 3, -15, -53, 6, -5, -45, -12, 22, -15, 7, 36, 34, -70, 11, -42, -11, 0, 6, -1, 30, -7, -17, 32, 14, -49, 10, -5, 7, -27, 8, -30, -40, 8, 27, -9, -9, -26, -1, -7, -26, 14, -108, -6, -33, -36, -29, 3, 12, -25, -11, -14, -11, 21, 21, 16, -36, -18, 24, 6, -2, 20, 3, -29, 32, 6, 9, 5, -20, -13, 14, -7, 2, 7, -42, -6, 15, -37, -2, -46, -21, -32, -12, -34, -18, -15, -52, 27, 8, -72, 5, 51, 17, -21, 8, -15, -35, -9, 4, -12, -14, -1, -66, 26, -17, -29, -18, -8, -24, 
  36, -12, 22, -1, 10, -10, 16, -5, -28, -33, -2, -6, 17, -10, 16, 13, -33, 31, -38, 2, 8, -12, -62, 4, -18, -12, 6, -12, 31, -5, 7, -34, 16, 3, 36, 31, -16, 27, -8, 27, -34, -34, 1, 4, 39, -35, 20, -3, 21, -11, -25, -19, 5, -15, -21, 11, -16, -5, -19, -13, -72, 27, 47, 13, 55, 19, -28, 13, 12, -2, 23, 11, -34, -14, -17, -19, 3, -10, 18, -15, -2, 22, -14, 17, 19, 40, -6, -11, -20, -2, 28, -33, 8, -20, 10, -21, 6, -19, 28, 33, 24, 1, 8, -10, -2, 10, 2, -46, 60, 17, 44, 16, 17, 0, -30, -9, 8, -22, 19, -4, 7, -31, 39, -22, -16, -19, 3, 10, 39, 16, -3, -14, 27, 7, 33, 29, 10, -20, -3, -24, 2, 7, 40, -12, -16, -4, 22, 10, 31, 27, -14, 1, 5, 4, 41, 29, 22, -57, -2, -3, 17, -40, 41, 21, 23, -34, 4, 0, 4, 21, 6, -4, 38, 14, 39, -4, 40, -31, -9, 19, 15, -17, 56, -49, 5, -15, 25, -18, -24, 5, 4, -14, 70, -14, -16, -11, 44, -10, 13, 30, 5, -9, -36, 10, 0, -5, 18, 6, -5, 10, 45, -30, 5, 16, 6, -6, 8, 1, 4, -11, 44, -46, -29, -7, -4, -59, 19, 5, -4, -39, 2, -13, -2, 13, 20, 1, 21, 53, 36, -9, 38, -15, -12, 8, -14, -11, 57, -39, 4, -17, 49, -22, -13, -9, -8, -4, 78, 10, -10, 20, 41, -23, 47, 29, 30, -23, -8, 1, 22, 3, 28, 12, 4, 28, 35, -27, -20, 2, -3, -26, 28, 12, -8, -11, 39, -30, -49, 13, -31, -56, 4, -17, 6, -1, -1, -3, -17, 4, 47, 12, 32, 41, 39, -8, 32, -14, -7, 12, -19, 5, 58, -11, -1, -19, 26, -17, -20, -9, -37, 10, 69, 12, -8, -6, 39, 2, 21, 7, 7, -28, -48, 1, 31, -11, 28, 15, 7, 28, 22, 1, -9, 17, -14, -10, 24, 7, -30, 4, 44, -52, -14, 14, 7, -39, 10, -35, 14, -1, 15, 28, -31, -1, 25, 20, 58, 40, 43, 5, 25, -7, 2, 8, -12, 31, 52, -14, -10, -16, 25, -20, -4, -14, -26, -1, 69, 0, -8, 27, 53, 10, 8, 30, 40, -45, -12, 6, 61, -6, 45, 22, 6, 22, 7, 13, 23, 15, 4, -36, 39, 18, -17, 7, 58, -56, -34, 26, 6, -38, 13, -46, 13, -12, 22, 18, -35, -39, 24, 13, 57, 37, 50, 10, 44, 12, -5, 12, -23, 22, 39, 6, -23, -22, 37, -18, -10, 7, -26, -2, 84, -20, -1, 31, 48, 12, 20, 2, 53, -55, -19, -4, 27, -26, 21, -1, 16, -1, 13, 22, 29, 17, 1, 10, 46, -21, -23, 6, 59, -54, -15, 3, -4, -18, 21, -34, 12, 4, 20, 37, -5, -29, 11, 31, 65, 50, 45, -23, 19, 6, 1, 23, -8, 11, 32, 11, -29, -18, 44, -20, -2, -33, -44, 20, 94, 27, -4, 70, 52, 25, 27, -33, 29, -41, -34, -21, 16, -34, 79, 15, 21, 2, 1, 20, 43, 15, 18, 12, 58, -7, -4, 17, 63, -64, -26, 36, -37, -3, 66, -21, 18, 7, 15, 46, 6, -21, 21, 10, 66, 37, 34, -17, 16, 39, -1, 44, 7, 41, 42, -9, -55, -14, 40, 7, -9, -18, -20, -5, 78, -13, 10, 72, 73, 21, 14, -6, 25, -44, -30, -28, 7, -36, 65, -6, -2, 17, -2, 20, 31, 2, -30, 6, 37, 25, -22, -24, 48, -26, -28, -11, -20, -15, 64, -7, 5, 12, 39, 43, -1, -11, 6, 20, 65, 31, 27, -22, -59, 7, 2, -11, 15, 44, 34, -24, -56, 5, 54, -18, 9, -25, -34, -2, 65, -55, -16, 49, 70, -4, -1, -3, 41, 8, -23, -26, 10, -18, 78, 23, -23, 13, 14, 8, -10, 28, -34, 2, 21, -8, -23, -13, 15, -66, -20, -27, -4, -5, 51, -16, -7, -6, 39, 31, -6, -11, -11, 15, 24, 12, 7, -59, -2, 24, 10, -6, 11, 76, 15, 14, -80, -32, 52, -33, -11, -58, -30, 10, 52, -8, 22, 25, 63, 17, 33, 9, 7, 16, -40, -6, 38, -5, 63, 20, -14, 18, -8, -30, -20, 21, -16, 18, 7, -9, -12, -26, 3, -27, -6, -32, 5, 9, 9, 32, 6, 34, 39, 12, -31, -1, -4, 17, 6, 27, 29, -31, -16, 22, 4, 10, 28, 63, -2, -12, -68, -8, 58, -41, -28, -22, -34, 37, -74, 86, 27, 38, -2, 21, 48, -20, 49, 59, -22, 8, 14, 16, 22, 19, 65, 15, -10, 23, -35, 17, 67, 2, -6, -8, -10, 22, 50, -23, 28, 3, -2, 11, -39, 46, -13, 8, 27, -18, -13, -12, 9, 1, 14, 24, 33, 16, -23, 29, -4, 7, 44, 24, -12, -3, -11, -26, 35, -9, 29, -4, -22, -3, 
  -7, -9, 76, 23, 1, 35, 1, -59, 38, 30, -25, -50, 0, 60, -2, 18, 12, -1, -21, -18, -63, 5, 51, -25, -25, 32, -62, 32, 32, -47, 8, 71, 22, 15, -33, 20, -5, -30, -8, -36, 28, -78, 1, -1, -40, 1, 8, 70, 66, 5, 14, 62, -11, 25, 19, -56, -22, 41, -17, -23, 23, 51, 32, -31, 12, 14, 55, 43, 6, 42, 1, -9, 64, -22, -37, -38, 44, 67, 17, 25, 35, -2, -62, 3, -79, 68, 27, -54, -33, 9, -56, 38, 51, 17, 12, 18, 46, 33, -31, 6, 5, 49, 12, -22, 12, -20, 4, 16, -19, 24, 33, 57, 9, -19, 42, 40, -7, 8, 57, -3, 11, 41, 5, -28, 50, 59, -1, -36, 10, 26, 89, 58, 23, 22, 44, -18, 42, -8, -48, -45, 38, 52, 20, 37, 31, 7, -37, -8, -49, 32, 29, -73, -39, 39, -71, 55, 31, 52, 4, 24, 44, 44, -11, 6, 8, -30, 33, 5, 11, -11, -14, -15, -17, -7, 40, 46, -14, -2, 32, 21, -26, 16, -9, 6, -7, 31, 1, -36, 58, 44, 15, 18, -16, 46, 72, 32, 24, 39, 31, -12, 46, -40, -15, -22, 33, 35, 39, 49, 23, -10, -57, 9, -72, 19, 29, -50, -37, 23, -31, 36, 27, 33, -20, 33, 65, 49, 18, 2, 8, 7, 18, -6, 8, -24, 0, -7, -26, -4, 8, 39, -40, -21, 38, 16, -14, 17, 34, -10, -41, 11, 35, -19, 40, 29, -4, -7, 7, 42, 62, 31, 22, 21, 27, -16, 29, -47, 20, -28, 39, 64, 29, 39, -5, -23, -26, 7, -51, 25, 23, -24, -39, 13, -26, 30, 15, 43, -19, 45, 62, 60, -19, -32, 30, 3, 6, -37, -9, -2, 21, 27, -22, -66, 40, 61, -22, 15, 33, -4, -59, 22, -15, -15, -21, 23, 24, -24, 23, 46, 9, -41, 26, 24, 68, 47, 29, 38, 15, 6, 43, -72, 20, -20, 50, 77, 26, 36, -12, -10, -1, 2, -30, 29, 32, -33, -13, -7, -50, 8, -4, 52, -43, 27, 66, 18, -40, -66, 22, 20, 17, 0, 5, 0, -30, 48, 16, -43, 56, 61, 16, 28, 43, -1, -57, 26, -37, 1, -17, 6, 23, -17, 40, 52, 6, -25, 14, 22, 52, 39, 36, 27, 7, -24, 25, -20, 4, -38, 54, 62, 40, 17, -27, -12, 1, 0, -38, 38, 12, -40, -25, 21, -43, 31, -15, 36, -14, 50, 22, 20, -20, -65, 35, 7, 20, -21, 12, 3, -40, 36, -21, 4, 20, 41, 23, -4, 27, -14, -27, 49, -10, -14, -19, 19, 19, 0, 25, 45, 6, -32, 19, 30, 68, 14, 17, 19, 23, -5, 38, -18, -25, -36, 55, 79, 58, 17, -26, 13, -22, 18, -48, 26, 46, -9, -2, 0, -23, 15, -6, -7, -47, 21, 12, 4, -39, -43, 41, 36, 23, -27, 24, 1, -18, 35, 4, -12, 19, 39, 7, 15, 21, -20, -15, 40, -23, -27, -49, 36, 23, -32, 42, 41, 22, -22, 8, 19, 39, 26, 0, 26, -3, -8, 18, -48, -16, -6, 45, 61, 30, 22, -20, -1, -18, 32, -48, 38, 45, -8, 1, -16, -39, 15, -8, 29, -45, 40, 16, -14, -39, -16, 24, 31, 36, -25, 4, -10, -27, 29, -9, -13, 42, 26, 2, 32, 27, 17, -26, 48, -29, -26, -17, 16, 5, -16, 36, 41, 39, -9, -4, -1, 28, 27, -35, 15, 15, 3, 17, -6, 11, -44, 61, 37, 17, 33, -20, -2, -38, 43, -23, 19, 14, -12, -11, -70, -18, -1, 10, 32, -31, 30, -1, 12, -38, 0, 39, -3, 19, -41, 3, 2, -13, 33, -4, -13, 9, 33, -3, 0, 24, -8, -26, 28, -53, -13, -8, 21, 3, -17, 27, 56, 18, -11, -25, 27, 44, -3, -1, 27, -8, -9, -17, -40, 24, -16, 43, 41, 13, 17, -20, 3, -12, 16, -7, 16, 31, -2, -19, -59, -46, 20, -21, 60, -37, -3, -47, -22, -29, -7, 16, 19, 30, -32, 2, 13, -5, 16, -17, -31, 24, 24, -15, -4, 1, -71, -21, 32, 14, 9, -21, 22, 32, -27, 21, 16, 24, 17, -10, 26, 12, -14, 4, -17, 25, -10, -21, -1, 46, -5, 27, 56, -5, 26, 9, -16, 9, 14, 2, -32, 27, 16, -6, -31, 12, -11, -18, -6, -15, 4, -22, -2, -35, 9, 15, -1, 44, 3, 11, 27, 8, 18, -22, -22, 6, 15, -2, 5, 25, 27, -9, 2, -8, 8, 10, 30, -5, 3, 30, 27, 40, 9, 35, 17, -2, -7, 50, 7, -15, 0, -7, -5, 16, 8, 14, 31, 13, 12, -21, -1, 0, -13, 17, 28, 45, -14, 4, 19, -37, -3, -1, -23, -22, 5, -59, -3, -72, -22, 30, -36, -13, -16, 6, -6, 15, -20, -15, 22, -1, 7, 35, -3, 4, 13, 3, 19, 30, 26, 7, 21, -25, -2, -19, 28, -17, -6, 
  58, -30, 31, 14, 28, -5, -4, 35, 6, 12, -10, -23, -1, 9, -35, -14, 11, 30, 31, -64, 12, -14, 10, -14, 40, -11, -37, -31, -55, -52, -3, -18, -7, 28, 24, -13, -20, -12, 28, -51, 8, -22, 31, -11, -3, 12, 4, -2, 8, 48, -25, -2, 23, -33, -15, -18, -57, 16, -39, -34, 4, -12, -43, -5, -16, -8, 8, 7, -19, 27, -7, -16, -68, 11, 13, -34, -4, -5, -66, -29, 1, 26, -11, 24, -7, 4, -4, -50, 20, -10, -20, 30, -21, -19, 17, -10, -47, 14, -96, -27, -56, -5, 30, -27, -23, 14, 11, -12, -55, 8, 2, 18, 9, -3, -30, -14, 13, -27, 21, -34, -33, -11, -69, -27, -24, -11, -10, -4, -7, -37, -20, -2, -4, 23, -71, 56, -38, 10, -23, -11, -47, 3, 1, -16, -2, 8, -12, 0, 4, -42, -8, -35, -4, 8, -1, 33, -4, 1, -33, 42, -73, 14, -81, -29, -52, -20, -28, -27, -7, -15, 10, -23, -45, 10, 29, -6, -46, -13, -49, -43, -5, -15, -19, -44, -14, 25, -46, -9, 18, -56, 12, 28, -8, -54, -64, 16, 4, -1, -112, -44, -35, 30, -14, -44, -50, -4, -2, -9, 23, -10, 15, 14, -11, -35, 14, -29, 13, 26, -16, 0, -52, -8, 7, 18, -75, 9, -5, -48, -34, 1, 12, -25, -34, -14, 29, -36, -22, 11, -40, -31, 6, -22, -32, -56, -13, 0, 39, 4, -113, 38, 1, -62, 20, -59, -1, 1, 51, -32, -34, 10, 24, -5, -16, -45, -14, 6, -15, -39, -2, -18, 23, 6, -47, -5, 31, -31, -4, -33, 13, 25, 9, 55, -49, -6, -45, -67, 11, 47, -41, 20, 11, -49, 24, 20, 5, 4, -22, -15, 28, -24, 17, -19, -44, -77, 37, 20, -46, -21, -4, 13, 38, -16, -41, -13, 13, -56, 26, -20, -8, -17, 33, -22, -15, 16, 30, -7, 0, -28, -5, -32, 6, -48, 29, -45, 31, 12, -9, 6, 10, -26, -21, 7, -7, -3, 25, 29, -57, 18, -5, 8, 8, 2, 15, -12, 2, -69, 17, 23, 25, -66, -14, 22, 22, -16, 19, -35, -25, -29, -19, 59, 13, -38, -28, -2, -13, -24, -35, -5, 20, -57, 32, 21, 22, -2, 23, 5, 7, 33, 40, 23, -6, -31, 46, -35, 29, -64, 54, 29, 25, -8, -7, -16, 39, -13, 8, 27, 1, 29, 39, 46, -51, 35, -2, -41, -36, 8, 14, -3, 36, -54, 32, -2, 31, -88, 5, 29, 35, -28, -28, 2, -36, -27, 8, 38, 15, -30, -39, 35, -34, -33, -33, -13, 20, -26, 34, 13, 9, 8, 33, 14, 20, 27, 35, 30, -6, 4, 11, -53, 26, -34, 34, 43, 40, 19, -14, 37, 13, 19, 13, 23, 52, 15, 0, 43, 7, 20, -14, -21, -30, 2, 11, -66, 22, -78, 3, -15, 31, -58, 23, 20, -25, -47, 14, -11, -3, -6, 23, 48, 15, -14, -45, -13, -6, -18, -9, 6, 7, -15, 33, 39, -9, 1, -11, 24, 14, 31, 17, 5, -3, 13, 24, -41, 26, -10, -3, 37, 38, 23, -3, 25, 3, 5, -1, 20, 21, 4, -27, 11, 19, 39, -2, -6, 24, 26, -38, -62, -41, -8, -2, -17, 35, -21, 22, 22, -30, -50, 11, -31, -5, 12, 64, 36, 20, 7, 25, 3, 40, 8, 39, 2, -28, -11, 17, 11, 26, 11, -12, 11, 17, 8, -29, 11, -6, -7, 33, 10, -44, -26, 9, -2, 36, 18, 7, -40, 8, 10, 3, 10, 22, 13, -1, 4, -3, 39, 24, -10, 29, 27, 18, -54, -28, -17, 24, -6, 22, 13, 35, 3, -5, -36, 6, -8, -23, 17, 18, 23, 9, 35, -12, 10, 5, 24, 7, 20, -30, 5, 8, -12, -28, -17, 35, 26, 17, -7, 23, -3, 2, 2, 4, 28, -25, 12, -5, 31, -4, 29, 19, -42, -59, -12, -1, 3, 1, -63, -17, -23, 13, 22, 17, -10, 34, 36, -40, -27, -38, -1, -24, -7, -4, 2, -45, -35, -29, -10, 26, -6, -37, 21, 22, -14, 3, 52, 5, 29, 0, 17, -4, -10, 7, -18, 2, 11, -1, -40, 20, 60, -5, -13, 7, 20, -27, 19, -9, 13, -7, -27, 8, -49, 21, 11, -7, -47, -20, -14, -3, -14, -67, -7, 11, -4, -8, -30, -8, 3, 35, -15, -14, -42, -3, 32, 6, -19, -11, -26, -39, -2, 5, -18, -3, -20, -3, 26, -20, -67, -20, 25, 13, 14, -3, 22, -43, -5, 16, 0, -36, -72, -52, -8, -10, 23, 12, 18, 21, -14, -24, -10, 33, 52, 6, -13, 16, 61, 39, 16, -26, 13, 29, 7, -21, -28, 18, 1, 5, 3, 7, -26, 21, -3, 20, -2, -3, -10, 2, 18, -3, 7, -2, -34, -5, 16, 12, -15, -10, 8, 33, -26, 33, -18, 13, 0, 18, 3, -22, -11, -58, -18, -7, 2, 1, 8, -7, -10, 
  -5, 1, 0, -6, -5, 1, -18, -16, -8, 2, -4, -17, -16, 10, 5, -11, -10, -8, -5, 1, -4, 4, -15, 11, 5, -5, -3, -4, -10, 12, -6, -2, 7, -5, -11, -10, -10, 4, -1, -12, -1, 7, -9, -17, -1, -4, -10, -18, -18, -1, -10, -6, -11, -11, -10, -1, -4, -16, 6, -4, -12, 2, 8, 0, -16, -9, 3, -18, -4, 1, -3, 1, 0, -7, 3, -14, 4, -5, -17, -1, 5, 0, 1, -2, 0, -7, 6, 5, -10, -11, 1, -10, 2, -7, -14, -4, 1, 7, -4, -11, 3, -18, -10, -4, 9, -10, -11, -4, -2, -8, -7, -3, 8, -1, -10, -16, -8, 6, 2, -6, 1, -11, -7, -12, -11, -13, -3, -13, -10, 7, -6, 5, 1, -2, 8, -13, -1, -8, 8, -16, -15, -6, 5, -23, 1, -3, 1, -14, -11, -1, -6, -12, 5, -14, 3, -6, 1, -3, 9, 1, -8, -8, -3, 4, 6, 3, -1, -15, -16, -4, -8, -6, -10, -14, -12, -14, -7, 5, 12, -3, 4, -4, 7, -15, 9, 1, 3, -2, -4, -15, -5, -4, 9, -12, -10, -8, -5, -4, -6, 1, -1, -2, -9, -15, 11, -12, 3, 2, -7, -11, -18, 13, -6, -8, 6, 12, 8, 3, -1, -15, -9, -4, -11, -2, 8, 0, -1, 4, -2, -4, -9, 14, -13, -2, -6, -12, -8, -15, -14, -17, -9, 11, -19, -3, -1, -13, -11, -6, 8, -6, -5, -12, -12, -2, -9, -6, 0, 7, -14, -7, -12, -9, -9, -14, 7, 11, -12, -10, 7, -4, -13, 3, -1, 9, -13, 10, -15, -8, -5, -13, 4, -2, 9, 9, 3, -14, -16, -1, -11, 5, -7, 8, -1, -17, 5, -7, -12, -10, -9, -1, 6, -6, -7, -13, 3, -16, -17, -2, -13, -14, 2, 7, -1, -4, -9, -10, -21, 5, 0, 11, 6, -12, 2, -13, 9, -8, -3, -4, 7, -10, 1, -6, -10, -5, 0, 5, -17, -18, -4, 5, 9, -17, -6, -5, 7, -6, 7, -18, -1, -10, -14, -4, 0, 9, 8, -4, 0, -17, 6, -6, -11, 6, -4, 2, -11, 10, -8, -2, 9, -2, 0, 6, 9, -9, -2, 2, -9, 5, -8, 8, 8, -4, -3, -1, 2, -9, -14, 2, 0, 7, -11, -11, 6, -5, 10, -4, 5, -14, -6, 11, -11, -9, -5, -18, 6, -9, 7, -17, 0, -2, -8, -4, -8, -4, -12, 6, 1, -14, -2, -15, -17, -11, 4, 4, 6, -6, -15, -1, -6, -4, -4, -9, 9, -3, -3, 4, -12, -13, 12, 10, 2, -3, -3, -8, -18, 4, -9, 2, 3, -8, -10, -10, -9, -7, -13, -7, -7, -12, 2, 0, -6, -13, -18, 8, -11, 1, -4, -7, -17, -10, -4, 8, -11, -5, -18, -9, -11, -12, -10, -13, -18, -17, 3, 6, 9, -12, -9, -16, -1, -10, -1, 9, -14, -5, -4, 10, -6, -3, -8, -13, -13, 6, -13, -14, 9, 0, 2, 6, 4, -12, 2, -12, 6, -7, 11, -3, 1, -12, -12, -9, 1, 5, 4, -4, 6, 7, -5, -18, 7, -14, 8, 0, -4, -15, -1, 3, -1, 1, -9, -15, -3, 2, 9, 7, -3, -1, -18, 8, -11, 5, 0, -4, 2, 11, -17, -5, -7, 0, 4, 1, 1, 6, -13, -13, 10, -10, -4, 5, -1, -1, -7, 6, -10, -12, -9, -10, 7, 6, 7, -4, -6, -16, -6, -10, 5, -12, 7, -5, 10, 3, -17, 3, -16, -14, 2, -16, 11, 6, 8, -8, 4, 13, 12, -3, -1, 10, -8, -13, 1, -13, -2, -6, -14, -3, -10, 3, 9, -5, 3, -18, -7, -10, -12, 7, 7, -9, 10, -2, 7, 6, -9, 8, 2, -5, 8, 3, -5, -15, 0, -9, -7, -9, -9, -3, 10, -11, 6, -11, -13, 3, -12, -5, -9, 0, 0, -2, 1, -14, -14, -13, 9, -7, -3, -15, -12, -15, -3, -8, 7, 0, 11, 4, 4, -10, 6, -9, -7, 9, -6, 1, -5, 7, 1, 8, -2, -16, 10, 5, -7, -1, -8, -14, 1, -9, -4, 9, -3, -7, -3, -12, -8, -8, 3, -11, -1, -12, 8, 0, 0, 11, -11, -2, 3, 6, 9, 2, 9, 6, 9, -2, 1, 8, -12, -1, 8, -2, -10, 11, -19, -6, -6, 8, -9, 11, -1, -10, 1, -7, 7, -22, 1, -7, -11, -10, -4, 5, -15, -4, -6, -9, 1, 2, 11, -14, 10, 2, -11, 5, -7, 0, 10, -1, 13, -2, -4, -5, 0, -16, 3, -4, -5, -14, -2, -3, 5, 8, -9, 6, -3, -18, 9, 7, -16, -6, 8, -11, -2, -2, 11, -5, 5, 9, -14, -15, -12, 8, -22, 8, 0, -11, 0, 0, 10, 4, -9, -2, 7, -17, 2, -3, -5, -1, 2, -16, -8, 9, 5, -3, -15, -6, 8, 3, -8, -11, -9, 3, -5, 11, 7, 4, -2, 8, 
  -7, 8, -19, -15, 8, -6, -7, -14, -22, 16, 13, 16, 6, -33, 13, 18, -4, -24, 11, -4, -4, 25, 34, 12, -29, -4, 16, -83, -8, -49, 8, -59, 23, 0, 39, 17, 18, -7, 21, -14, 9, 6, -12, -5, 23, 14, -37, -28, 53, 6, 1, 21, 10, -3, 68, 12, 22, 37, -20, 16, -8, 19, 35, -22, -30, 2, 28, -7, -28, -34, -28, -22, -4, 1, -8, 12, 11, -16, -24, 13, 1, 18, -23, -5, -21, -8, 15, -5, -11, -4, 14, -52, -67, -18, 16, -84, 12, -5, 92, 35, -33, -28, 34, -11, -10, -13, -2, -11, 24, -17, 37, 6, 49, -30, 6, 17, 56, -3, 83, 17, 0, 9, -21, 14, -27, 22, 8, -25, -30, -7, -44, 21, -22, -84, -50, -23, -6, 0, -41, 0, -35, -56, -39, 6, -15, -6, 10, -32, 35, -21, -14, 8, 0, -16, 7, -34, -54, -30, 13, 7, 36, 18, 60, 23, -44, -49, 45, -20, -10, -22, 6, -38, 43, 30, 1, 20, -33, 7, -13, -9, 11, -18, 17, 18, -10, 8, -54, -14, -17, -40, -34, -8, 17, -52, -54, -14, -9, -73, -69, -21, -30, 28, 23, -5, -6, -68, -24, 70, -43, -44, -5, -17, 57, -63, -36, 1, -5, 16, 9, -51, -10, 8, -30, -62, 32, 13, 56, 37, -48, 6, 19, 2, 2, -21, 6, -40, 35, 35, 19, -13, -33, -26, 30, -16, -26, 39, 38, 35, 0, 15, 1, -3, -2, -36, 16, -22, -33, -87, -1, -13, -2, -19, -24, -24, -76, 38, -4, -5, -17, -8, -33, 53, -3, -37, 17, -53, 11, -66, 21, 9, -14, -8, 9, -64, -57, 4, 15, -32, 63, 41, 19, 63, -34, 23, 34, -16, 7, -15, -12, 9, 35, 5, 21, -16, -38, -34, 16, 29, -52, 20, 53, 44, -37, 16, -6, -15, -18, -43, -3, -47, -14, -39, 3, -36, -15, -18, -37, -40, -32, 32, -16, -7, -35, -21, -9, 54, 0, 21, 7, -32, 6, -24, 8, 14, -22, -19, 11, 3, -34, -35, 30, -33, 76, 38, 33, 80, -36, 7, 6, -10, 26, -35, 4, -17, 10, 16, 46, -3, -33, -22, 4, 32, 28, 19, 16, 0, -21, 8, -29, -26, 10, -13, -30, -17, -10, -6, 37, -15, -3, -10, -24, -42, -50, 10, 17, -23, -12, 11, -45, 43, -5, 36, -19, -37, 11, -52, -25, -18, -7, -46, 2, -4, -79, -12, 13, 11, 65, 20, 21, 67, -28, -33, 5, -47, -3, -48, 20, -34, 14, 3, -6, -5, -34, -58, 3, 14, 15, 26, -26, 21, -12, 1, -4, -10, -1, 14, 7, -7, -31, -9, -25, -45, 8, -8, -46, -45, -34, 32, -12, -17, -21, -29, -35, -10, -33, 4, 24, -2, -11, -27, -6, -13, -21, -15, 16, -8, -35, -66, 26, -38, 29, 30, 11, 51, -48, -30, 19, -43, 4, -14, 7, -36, -6, 2, 9, -11, -4, -14, -11, 14, 6, 14, -33, 33, -19, 8, -72, -14, 7, -62, 22, 4, -12, 1, -33, -59, -18, -20, -7, -32, 2, 19, 16, -26, -22, -20, -36, 3, 18, 10, -17, 12, 1, -22, 8, -7, 14, -42, 8, 4, -68, 0, 15, -20, 36, 32, 4, 39, -14, 3, -4, 0, -7, -12, 2, 8, 8, 13, -3, -36, 8, -26, -22, -1, 21, -32, 0, 4, 0, -29, -45, 15, 8, -14, 15, -17, -27, -2, 7, -14, -100, 16, -57, 13, -76, 8, -8, 3, 15, 11, -70, -2, -7, -16, -1, 4, 35, 1, -36, -7, 10, -38, 23, -25, -48, 6, -9, -42, 28, 15, 19, 41, -7, -29, -24, 3, -13, 0, 15, -5, 1, -2, 14, -7, 14, -3, -40, -23, -6, 7, -47, -1, -27, -16, -57, -12, -7, -37, 8, 5, -17, 28, -23, -11, -5, 7, -14, -3, -24, 39, 8, -15, 2, -20, 13, 14, 60, 5, -11, 5, 14, 13, -28, 22, 3, -56, 59, 18, -46, -34, 0, -24, 83, 14, 59, 43, 25, -12, -57, -3, -12, -38, 20, -5, -21, 6, 24, -16, -12, 25, -25, -7, 9, 12, -10, -60, -17, -84, -28, 2, -27, -56, 23, 42, -72, 1, -10, 17, -72, 27, -8, -36, -15, 44, 19, -7, 5, 11, -9, 12, 54, 18, -30, -13, 0, 24, -2, 25, 16, -30, -3, -10, -29, -29, -2, -4, 86, -6, 25, 36, 17, 8, -27, 11, -3, -33, 1, 2, -28, 10, 0, -32, -7, 10, 1, 2, 34, 38, 1, -24, -18, -24, -60, -11, -34, -25, 12, 0, 28, -6, -16, 34, 34, 26, -18, 0, 10, 4, -13, 10, -1, 24, 14, -5, -22, -1, -41, -21, 22, 1, -12, -3, 15, -2, 30, 7, 34, -27, 19, 30, 122, 21, 25, 57, -14, 39, 10, -5, -9, -23, 11, -5, -15, 26, 16, -17, -26, -24, -6, 9, 38, 12, -21, 18, 21, -8, -43, 24, 3, 0, 19, 4, 
};
const TfArray<2, int> tensor_dimension9 = { 2, { 16,832 } };
const TfArray<1, float> quant9_scale = { 1, { 0.0059770997613668442, } };
const TfArray<1, int> quant9_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(8) int8_t tensor_data10[16*16] = { 
  8, 15, 38, -50, 32, -19, 25, 5, 36, -70, -21, 42, -16, -20, 55, -9, 
  -11, -39, -58, 7, 9, -102, -55, -42, -26, -8, -82, 72, 63, 31, -37, -36, 
  -2, 4, -3, 85, -31, -28, 16, -3, -48, -42, 35, 38, -67, -71, -54, -25, 
  -4, -37, -52, 1, -46, 12, 71, 0, 0, 48, 25, 30, 42, -18, -17, -8, 
  -21, 75, -43, 27, -64, 10, 7, -15, -9, -67, 57, -33, 3, -33, -12, -66, 
  -6, 65, -67, -24, -14, 32, -47, -30, -51, -37, 42, -35, 50, 49, 7, 18, 
  -78, 77, 33, 20, -17, -43, -13, -4, -101, 83, -25, -11, -53, 15, -47, -48, 
  -46, 16, 72, -127, -41, 43, -17, -50, -17, 4, -68, 20, 66, -3, -8, 27, 
  62, 33, -33, -74, -72, -50, 8, 24, -29, 29, -72, 40, 68, -27, 26, -120, 
  69, 22, -2, -30, -19, 50, -6, -9, -70, 11, -7, 43, -47, 95, -32, -61, 
  -31, -28, 17, 37, 26, -67, 43, -26, -4, 2, -41, -52, 60, -32, -2, -70, 
  28, -80, -6, 98, -31, -5, 27, 51, -38, -32, 66, -88, -20, -53, -1, -7, 
  -62, -94, -17, -17, 24, -23, -73, -17, 88, -16, -30, -36, -33, -55, 7, -4, 
  34, -76, -56, -10, 73, 4, -10, -6, 19, -29, 1, -64, -66, 36, 28, -43, 
  8, -57, 53, 27, 57, 13, -3, -13, -74, 43, 42, -49, -70, 37, 52, -25, 
  61, 51, -55, -6, -14, -84, -8, -51, 28, 19, -53, -44, -32, -28, -30, 91, 
};
const TfArray<2, int> tensor_dimension10 = { 2, { 16,16 } };
const TfArray<1, float> quant10_scale = { 1, { 0.0071956589818000793, } };
const TfArray<1, int> quant10_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(8) int8_t tensor_data11[8*1*9*3] = { 
  /* [0][0][][] */ -127,19,-78, -66,21,-58, -72,26,-18, -119,7,-28, -62,75,-54, -74,11,-15, -50,10,-48, -23,7,16, -5,54,-58, 
  /* [1][0][][] */ 85,-67,-3, 59,-13,-26, 92,-78,-40, 101,-31,-53, 110,-44,8, 127,-69,33, 112,-60,-39, 79,-80,-44, 73,-48,50, 
  /* [2][0][][] */ -127,-101,-85, -42,-117,-36, -117,-19,-31, -67,-63,16, 16,-21,-29, -47,-12,28, 6,3,-22, 10,-16,8, -23,28,-24, 
  /* [3][0][][] */ 9,104,8, 127,59,-36, 77,52,-10, 67,29,-17, 47,57,6, 13,32,-19, -21,-1,11, 46,60,-40, 96,53,-10, 
  /* [4][0][][] */ 27,127,-37, 56,81,0, 16,54,-48, -15,69,5, -10,62,-37, -62,55,-55, -61,19,15, -60,54,-38, -34,108,-76, 
  /* [5][0][][] */ 73,-50,-26, 50,-4,-12, -20,5,59, -94,43,42, 17,28,21, -24,33,127, -79,30,77, -24,45,47, -22,11,119, 
  /* [6][0][][] */ 26,-15,-126, -19,-24,-7, 75,15,-125, 51,-41,-99, 55,-25,-86, 102,30,-80, 66,-81,-102, 72,6,-16, 104,-24,-127, 
  /* [7][0][][] */ -19,13,16, -15,33,-51, -61,10,-33, 15,-49,-28, 72,41,-5, 101,-21,4, 127,-34,40, 58,21,68, 58,-31,26, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 8,1,9,3 } };
const TfArray<8, float> quant11_scale = { 8, { 0.0042628888040781021, 0.004312432836741209, 0.0041439770720899105, 0.0047955443151295185, 0.0043020164594054222, 0.0038360254839062691, 0.0030765680130571127, 0.0053675705567002296, } };
const TfArray<8, int> quant11_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const ALIGN(8) int8_t tensor_data12[16*1*6*8] = { 
  /* [0][0][][] */ -1,-4,-24,71,13,-17,85,-6, 27,-33,-18,-30,-19,-14,-31,-12, 2,-49,-16,19,29,-20,127,-18, 0,-28,-13,-2,-7,-16,-63,-26, -15,-6,-7,-6,-12,-34,-4,-35, -14,-4,-7,6,34,-33,41,-6, 
  /* [1][0][][] */ -127,32,-101,-21,37,21,-31,52, -82,8,-88,17,-6,9,-45,25, 1,-18,-44,72,61,18,-23,-9, 44,-65,-48,-7,-20,10,12,-93, -4,-78,4,-48,-70,-3,7,-117, -12,-47,120,-64,-101,-22,4,12, 
  /* [2][0][][] */ -20,16,4,5,11,67,-30,-27, -15,-31,18,1,15,-20,-61,-41, -1,-92,17,-21,6,45,-69,-16, 3,-127,11,11,13,62,-50,2, 5,-80,-5,-7,5,-23,-39,14, 1,-26,-19,25,16,32,-21,33, 
  /* [3][0][][] */ -10,-18,-7,21,-49,-4,-18,96, -1,-28,-2,59,-3,2,-16,15, 9,-26,5,-38,-5,9,3,-17, 6,-26,-33,92,11,4,-4,121, -4,-11,127,7,-2,-4,-9,-29, -22,-12,-23,6,-5,14,-17,41, 
  /* [4][0][][] */ 62,11,21,-28,-7,-31,14,101, 1,34,6,-31,-24,-2,34,11, 57,21,28,-3,-40,41,9,127, -10,10,-58,-14,-26,-26,-23,-75, -50,-12,-82,-17,-27,22,-71,28, 38,-21,1,-4,-26,10,-53,-3, 
  /* [5][0][][] */ -80,-13,11,69,62,18,-57,-8, -115,7,-7,37,48,34,-42,-28, -127,81,-10,9,47,-19,-28,18, -104,62,1,-6,-19,3,0,36, -78,-14,-4,-11,13,38,12,17, -76,96,5,42,7,12,35,25, 
  /* [6][0][][] */ 29,17,-6,-63,5,55,0,12, 39,11,-1,-115,-6,-5,-5,-35, 2,17,2,-123,-25,-5,-4,-60, 17,0,24,-110,-32,-30,2,-67, 31,1,-28,-127,-23,-39,32,-106, -25,10,54,-124,-49,-41,1,-78, 
  /* [7][0][][] */ -29,-7,-21,20,-14,9,6,2, -58,-17,-111,35,77,8,5,-2, -54,1,-127,-2,33,16,0,-8, -3,-4,-80,28,64,7,-14,-22, 21,-15,-26,-11,13,2,-17,-22, 46,-22,-7,50,48,13,1,-14, 
  /* [8][0][][] */ 11,-64,55,5,-12,-25,6,-25, 25,-118,-40,41,16,-13,19,-19, 9,-127,32,-21,3,-3,18,4, 1,-82,-16,-9,22,2,5,9, 50,-31,-9,3,13,4,-21,14, 42,-7,-12,14,-1,-3,-5,12, 
  /* [9][0][][] */ 37,-8,51,-13,20,-56,-42,-29, 24,13,37,8,54,-76,127,-2, -2,0,2,43,17,-62,56,16, 1,25,-14,16,120,-11,-10,8, -5,26,-32,5,5,16,65,-1, -27,-3,-19,-19,25,8,-3,-23, 
  /* [10][0][][] */ 7,50,-3,13,15,-65,-15,-8, 36,29,6,12,65,-100,36,-25, -5,-1,11,9,-14,-127,60,-28, 18,64,17,-7,5,-125,-16,-12, 5,-46,3,-16,5,-110,-29,-10, 6,82,27,-14,20,-79,39,0, 
  /* [11][0][][] */ -5,2,-15,10,-8,-55,22,-19, -29,22,-20,-11,-16,-46,9,5, -60,3,-29,13,-6,-18,44,-12, -117,6,-37,9,1,106,26,6, -127,7,-41,2,4,-53,3,5, -86,5,-40,-2,4,126,-18,53, 
  /* [12][0][][] */ 32,63,-47,1,-4,-34,17,-6, 2,3,81,4,3,-48,28,44, -13,103,-47,0,10,-27,38,-17, -7,88,-7,-6,-10,14,27,32, 34,-43,127,-15,-11,21,-14,15, 30,11,-12,9,-1,30,-22,19, 
  /* [13][0][][] */ 3,13,-10,-35,-52,18,23,-18, 1,-19,-2,-81,-75,0,-19,-66, -3,-71,-21,-70,-73,15,5,-16, 41,-127,34,-57,-33,7,13,3, -24,-112,16,-14,12,-4,-10,-22, 65,-53,-17,0,55,-19,17,-33, 
  /* [14][0][][] */ 26,2,56,-127,-111,56,-15,-20, -3,-11,-27,-119,-90,-9,8,-23, -12,68,46,-90,-105,-25,3,-4, -12,-32,19,-83,-41,-37,24,16, -10,46,14,-55,-64,-12,21,14, -4,76,-11,-25,-55,6,38,6, 
  /* [15][0][][] */ 36,23,14,-29,-32,-18,14,45, 4,-23,22,-62,-76,39,9,6, 13,-57,27,-127,-111,5,-14,-18, -8,-58,34,-89,-92,6,-18,4, 12,-24,-42,-40,-17,31,-5,78, 20,-3,1,-17,-4,29,7,9, 
};
const TfArray<4, int> tensor_dimension12 = { 4, { 16,1,6,8 } };
const TfArray<16, float> quant12_scale = { 16, { 0.0059758294373750687, 0.0051340358331799507, 0.0085597867146134377, 0.0048143966123461723, 0.0055329739116132259, 0.0055437134578824043, 0.0065628644078969955, 0.0064281481318175793, 0.0071342303417623043, 0.0052005997858941555, 0.0059458035975694656, 0.0060892705805599689, 0.0043100835755467415, 0.0056029642000794411, 0.0059119877405464649, 0.0065961000509560108, } };
const TfArray<16, int> quant12_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(8) int8_t tensor_data13[32*1*3*16] = { 
  /* [0][0][][] */ -14,21,36,-9,-64,-13,-38,24,14,-23,-71,0,-127,35,-92,-49, -3,-1,-3,-26,-58,-28,-39,20,23,4,-65,14,-96,5,-93,-56, 15,8,29,19,-34,6,-11,6,25,14,-38,50,-46,16,-40,17, 
  /* [1][0][][] */ 80,-6,-106,-21,6,-35,-2,21,0,71,2,69,6,37,30,-77, 52,-47,-66,-66,-4,-6,20,18,-19,-3,-47,6,-62,49,-51,-76, -29,67,5,-100,-43,7,-39,-5,-42,-92,-85,30,-127,47,-42,-51, 
  /* [2][0][][] */ -60,-58,74,-14,2,69,15,-31,-60,-66,-11,2,10,-38,-28,-25, -48,-63,-3,-27,-5,16,37,-127,-97,-38,-11,-59,5,-25,53,-22, 13,-37,-88,-46,-41,39,49,-102,-65,-22,19,-67,31,-2,20,-15, 
  /* [3][0][][] */ -11,-20,-33,39,28,-41,45,-73,28,27,58,-9,35,-26,43,30, 13,-79,-53,-34,62,-43,40,-127,-22,33,35,-18,27,-61,46,-11, -2,-60,5,-50,3,4,29,-85,-45,-31,65,-43,0,-50,63,15, 
  /* [4][0][][] */ -17,-8,45,-23,22,-10,48,1,18,-3,-6,-55,-16,59,31,14, 21,-60,-7,-127,-32,-84,38,33,28,33,-38,-97,-42,35,15,-8, 31,-50,-35,-110,-47,-90,45,5,28,1,30,-70,-20,41,-31,-1, 
  /* [5][0][][] */ 0,127,-24,20,-11,0,8,33,13,-23,36,-12,-11,103,-8,88, 93,20,-76,37,-15,-26,-61,-16,82,23,79,-30,19,1,16,19, -13,18,-60,-3,101,-89,-44,-19,-50,-43,-46,-28,26,-21,-25,-11, 
  /* [6][0][][] */ -23,-42,28,-127,-16,0,13,6,-12,-34,-37,4,-85,41,-20,10, 19,-16,28,-118,-76,1,-1,5,-14,-10,-19,-11,-51,24,-8,-48, 49,-4,-11,-76,-97,-14,39,22,-4,4,37,-15,-5,32,27,-57, 
  /* [7][0][][] */ 50,29,-111,4,-7,-110,-10,-59,53,39,37,7,-13,-8,34,17, 3,-39,-78,-1,21,-74,-67,-29,15,11,-6,37,-25,-107,-33,-49, -10,-57,3,25,6,-5,-127,13,-8,-15,-76,40,2,-46,-101,-57, 
  /* [8][0][][] */ 11,-6,7,16,28,-127,-10,-72,47,18,5,-32,12,34,23,20, -21,-51,10,-16,40,-119,-41,-25,39,24,-13,3,3,-28,-15,7, -23,10,46,5,40,-16,-71,-9,-9,-26,-54,-2,-39,-33,-56,-23, 
  /* [9][0][][] */ 75,-84,-73,-50,-120,-14,25,-13,-40,35,75,-10,17,9,42,-57, 11,10,-127,3,-64,2,-32,-6,-31,-42,55,-17,4,9,-31,-40, 18,59,-77,36,-16,10,44,1,-18,28,-11,37,33,38,34,-34, 
  /* [10][0][][] */ -32,-46,9,-16,-13,-20,18,-84,-9,11,8,-57,7,-15,87,83, 1,-127,-93,-44,-45,39,-19,-47,-7,29,2,-3,42,-44,90,-19, 12,-53,-70,-11,11,14,-54,-39,-41,-9,-6,35,46,-81,46,-7, 
  /* [11][0][][] */ 49,-11,-12,-88,-127,-2,60,14,-18,-31,9,-11,-75,-2,29,-43, 46,-25,-83,-55,-65,-18,20,4,18,-31,19,-50,6,23,2,-14, 20,17,-95,-38,-37,-28,47,-16,-15,15,0,-45,11,6,45,10, 
  /* [12][0][][] */ 37,45,7,1,-13,18,8,8,23,18,-22,11,-18,-38,-16,-32, 35,43,-6,15,-28,14,-39,26,23,-20,-21,-18,-93,-15,-69,-127, 10,-4,-9,-22,-85,6,-11,-34,-4,-27,-4,-8,-59,3,3,-56, 
  /* [13][0][][] */ 8,72,17,15,54,64,18,10,-127,-62,14,15,-30,6,-17,-92, -5,57,34,46,-44,-23,46,-25,-46,-65,11,-67,-42,37,2,-20, -8,53,7,-9,-41,-77,-21,-118,-6,-33,15,-52,0,39,12,46, 
  /* [14][0][][] */ 73,-39,-28,-52,46,-108,-1,-42,31,91,17,11,31,-10,4,-1, -1,-50,4,-18,18,-79,-3,-103,-22,-22,-3,0,11,-12,-20,6, -11,-127,41,-44,-16,-52,43,-126,-15,-30,-40,-55,-14,21,6,39, 
  /* [15][0][][] */ 52,-5,-29,61,-7,66,-94,53,-66,-12,68,23,4,-122,-68,-35, 53,-18,24,33,-26,25,-110,51,-18,15,40,73,49,-126,-83,-55, 68,-79,-2,67,-31,64,-127,34,-21,-1,-9,79,52,6,-101,-5, 
  /* [16][0][][] */ -81,0,-69,27,23,30,-21,-23,-58,-32,-37,-14,11,-34,-46,-16, -127,-6,-18,-11,6,22,2,-39,-30,-45,-54,42,-1,36,-22,15, -103,36,45,21,52,28,-9,-66,4,-12,-43,22,6,44,28,59, 
  /* [17][0][][] */ 17,-31,17,3,9,-62,38,2,47,58,-16,-38,17,58,-17,46, 6,26,11,36,-13,-33,-71,2,40,-7,-33,-27,-17,-73,-90,-17, 37,47,38,15,11,26,-90,21,35,-9,-56,14,-18,-112,-127,-126, 
  /* [18][0][][] */ -18,-55,-1,-40,-1,0,35,-67,-19,-19,-30,48,-13,47,22,34, -65,-48,65,-20,-18,-21,19,-48,-20,-69,-127,-15,-77,35,8,7, -78,-78,33,-30,-3,35,-28,-15,-3,-3,-93,31,-75,32,19,41, 
  /* [19][0][][] */ 7,-1,-25,0,-7,-26,-20,-8,22,39,12,26,-5,-11,25,23, 6,-4,-39,-19,10,-17,-18,-7,-33,-7,7,31,9,-127,10,-32, 4,48,3,34,6,-4,7,-4,-21,-5,-4,-9,-11,-25,19,-79, 
  /* [20][0][][] */ 29,93,58,50,24,-9,-75,16,13,15,23,-45,31,9,-69,-25, -32,22,84,2,-6,-2,23,-58,95,37,41,-98,11,28,-127,-10, 77,15,42,-4,-104,-39,-47,38,49,88,35,-77,-4,25,-70,-21, 
  /* [21][0][][] */ 17,37,-10,-3,71,14,-116,-2,-34,31,34,70,40,-78,-26,19, -36,15,38,6,-19,10,-83,32,-127,12,-37,71,-2,-60,-52,-31, -71,22,120,-48,14,-15,-46,7,-70,-99,-97,92,-49,43,-39,-4, 
  /* [22][0][][] */ -4,46,-19,44,50,-37,-48,36,-70,26,-15,36,4,-109,-85,-39, -6,62,26,46,56,57,72,10,-19,-34,-4,-28,7,-33,-53,-22, -27,35,-2,84,7,-14,127,-16,-63,-50,21,-52,19,32,-22,1, 
  /* [23][0][][] */ -114,-11,64,-42,0,8,-28,-22,-80,-127,-56,70,11,26,-23,-23, -58,23,-14,0,15,-5,40,6,-13,-114,-10,-39,-30,49,6,24, -16,32,-15,16,-51,-29,28,-13,-17,4,21,-51,-2,21,24,18, 
  /* [24][0][][] */ -47,-7,-27,23,42,7,-59,0,19,-26,4,-25,19,-18,-2,46, -8,21,-31,32,12,7,-57,7,20,26,31,4,26,-127,-25,4, 24,16,6,68,-10,45,-41,70,13,35,23,20,23,-90,-14,-63, 
  /* [25][0][][] */ 9,-19,-127,25,26,44,-104,-17,-125,10,-44,69,71,-18,-13,-6, 12,42,-103,32,50,-1,-60,-44,-55,-34,-32,31,37,-1,-17,37, -71,74,-8,-14,117,-64,52,-20,-122,-62,-45,99,67,63,-6,57, 
  /* [26][0][][] */ -38,112,1,-11,45,-30,86,-53,16,-7,17,-51,22,72,-9,19, -63,47,-25,65,64,-127,38,-96,50,-42,-11,-114,-3,58,4,72, -46,15,-36,17,-3,-94,58,-38,59,-5,-9,-68,-20,20,26,14, 
  /* [27][0][][] */ 2,4,-93,-46,4,-11,-7,-47,-8,-36,21,2,2,-21,-44,-56, 22,-13,-127,1,27,-23,3,-41,-18,18,28,-31,59,23,7,-30, 2,34,-69,24,31,-53,16,-53,28,4,41,-43,43,49,24,-15, 
  /* [28][0][][] */ 58,-1,-7,12,-76,2,-20,66,37,80,123,-26,-37,-51,-8,-90, 58,-15,-85,-49,-127,-3,7,39,-3,38,12,-69,22,-90,-32,-81, 46,10,-50,15,-70,-47,-10,23,7,1,45,-86,-14,2,-16,-25, 
  /* [29][0][][] */ -24,53,-2,60,-47,-55,76,-76,42,14,27,-127,23,44,26,48, 6,-53,21,-15,-16,-108,9,-102,36,4,-23,-61,10,41,-12,48, -12,-92,13,20,14,-46,-39,-32,62,7,-56,-20,-42,-22,-8,-22, 
  /* [30][0][][] */ -10,68,1,11,-17,62,-127,46,-10,-39,-54,6,-23,-24,-52,-7, -28,10,25,-9,20,11,-4,-12,4,-8,-42,13,-5,-13,-32,-33, -3,97,41,56,50,-7,27,27,8,13,-8,7,23,18,-14,-26, 
  /* [31][0][][] */ -28,4,19,-25,-9,-77,30,-126,-14,-32,-40,-80,-16,58,-8,23, -5,-52,51,33,-7,-18,-50,-13,24,-20,-36,-29,-21,56,10,-12, -3,56,-9,28,47,17,-127,24,26,25,-22,29,9,-36,-52,-23, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 32,1,3,16 } };
const TfArray<32, float> quant13_scale = { 32, { 0.0070327557623386383, 0.0034392594825476408, 0.0067154266871511936, 0.0055748284794390202, 0.0070352517068386078, 0.0038781249895691872, 0.0072267754003405571, 0.0063409628346562386, 0.0064712497405707836, 0.0051162675954401493, 0.005396056454628706, 0.0065315170213580132, 0.0082636578008532524, 0.0055585089139640331, 0.0061097978614270687, 0.003138640196993947, 0.0062958728522062302, 0.0054466449655592442, 0.0053775506094098091, 0.0086841471493244171, 0.0033084189053624868, 0.0048012575134634972, 0.0045212251134216785, 0.0063929012976586819, 0.0050684008747339249, 0.0038576715160161257, 0.0041897185146808624, 0.0062514115124940872, 0.0042687756940722466, 0.0047570592723786831, 0.0057307053357362747, 0.0065800310112535954, } };
const TfArray<32, int> quant13_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(8) int8_t tensor_data14[64*1*3*32] = { 
  /* [0][0][][] */ -28,-8,-7,-11,24,-64,7,-13,-2,-104,3,-65,-92,-30,-1,-19,25,-74,48,-65,-51,40,-4,53,-73,38,-7,-68,-127,-3,-10,-3, -35,-36,14,10,2,-10,49,-22,-69,-4,0,19,17,-17,-29,-52,-44,-61,-2,-87,-7,-22,-48,-9,-36,-49,-7,-3,11,-35,-24,-25, -49,-44,29,8,5,8,-13,43,-14,15,0,10,-55,13,16,-29,-33,24,-90,-17,29,-39,-44,12,2,1,1,28,17,14,-62,23, 
  /* [1][0][][] */ -105,-36,-2,-62,-4,19,34,-32,21,18,-46,5,-83,35,-60,-89,-6,7,35,11,11,-60,1,69,-48,6,4,38,-92,0,-28,31, -94,-13,6,0,-45,48,-124,10,52,-4,9,-40,1,28,-12,-11,-7,4,-10,33,0,8,6,-2,5,13,11,21,-21,14,-31,50, 20,22,-66,-10,-127,1,-31,17,22,-74,-48,2,6,-48,8,26,35,35,21,-31,-77,53,-17,-21,7,-12,-49,-70,-43,-51,15,-31, 
  /* [2][0][][] */ -68,-60,30,-38,-108,-63,-51,78,57,33,-35,4,-47,17,-46,-40,-5,48,-29,-1,-67,-98,-13,10,-55,17,-2,10,-68,-30,-19,7, -104,-13,-10,-11,-4,-18,-101,24,3,-5,-43,28,-29,32,-77,-34,-18,-23,-57,20,22,-35,22,26,25,7,29,24,-77,-17,12,-22, -109,22,-12,-30,-27,36,-127,91,49,-8,56,-23,41,-19,-43,-2,-44,31,-105,11,12,-1,22,-45,20,-2,-23,-27,-46,34,7,32, 
  /* [3][0][][] */ 31,28,-54,-73,-16,-34,3,3,-5,-11,-78,39,21,9,-62,-9,-71,29,-81,14,31,17,6,-127,18,-56,-107,-15,10,-26,18,-23, 52,-34,-15,6,1,-20,5,-23,0,-100,-5,-27,-8,3,-19,-9,-10,34,-24,-9,-11,-19,25,-27,-12,-2,-67,-8,-35,-58,13,-49, -3,-45,58,-2,-93,-11,-6,-23,8,-114,43,-85,-40,24,6,-33,33,-1,9,23,-35,-36,14,45,-29,51,-10,26,-82,-6,6,16, 
  /* [4][0][][] */ -36,-4,-32,-44,-34,-31,-35,11,-15,-41,-45,-92,-75,-30,13,-12,35,-28,36,-28,-37,37,-24,28,-30,39,-20,-39,-127,-15,-12,26, -17,-35,8,6,22,-19,14,-8,-11,-23,5,-1,-10,0,-4,-47,-4,-5,13,-43,-22,13,9,22,-76,4,-19,-29,-51,-32,0,-9, -70,-31,44,17,0,1,0,-38,-68,34,15,32,-9,45,-12,-95,3,-92,-35,-24,-4,-26,-11,25,-73,-30,11,17,12,1,0,-46, 
  /* [5][0][][] */ -127,-33,22,-14,25,-6,1,84,60,13,-42,0,-48,14,-52,-39,-10,41,-71,-17,13,-52,-19,65,7,-11,-4,31,-22,-10,-25,-23, -70,16,-21,-4,28,26,-60,35,3,-20,1,6,9,13,-26,-27,-5,34,-116,22,36,-13,17,26,3,7,-8,-5,9,-15,-47,2, -26,32,-81,-23,-19,3,12,74,40,-39,-40,-32,30,-48,-25,-20,5,21,45,24,-4,41,-33,3,-14,2,-60,-49,5,10,-38,-43, 
  /* [6][0][][] */ -115,-30,28,43,-23,-11,-124,-5,51,17,11,-26,-63,15,40,-96,5,7,-13,-2,-33,-33,-4,23,-99,18,1,78,-22,15,-29,16, -49,-127,-23,5,-19,-23,-47,-93,24,-66,-22,-19,-88,24,45,-64,17,20,12,-5,-24,-76,-44,-6,-29,6,27,24,-125,2,-13,22, 13,-8,-113,-26,-27,-21,-14,-17,1,20,13,-52,20,12,22,11,48,12,-27,25,32,21,15,-5,55,42,-23,-30,-35,-17,37,92, 
  /* [7][0][][] */ -91,19,-64,23,12,9,-34,24,38,19,11,33,17,-40,41,-23,-14,39,-42,32,4,-24,19,-62,23,5,-11,43,1,26,-50,31, -57,43,7,-3,-75,-32,-75,-5,-14,-17,-3,-31,-33,-7,-13,-19,21,-24,11,-11,-59,-9,-16,-4,-47,-6,-49,-11,-4,-26,-2,-15, -9,-16,6,-43,-98,7,-51,-95,-42,-2,34,-108,-127,-2,-23,-79,45,-121,17,-9,-23,1,-12,22,-89,22,-1,-7,-96,3,5,21, 
  /* [8][0][][] */ 34,34,-29,-68,-21,-11,-32,-17,14,-46,-114,-20,41,8,21,23,-27,25,-37,-24,1,21,42,-39,-7,-29,-39,-38,-13,-15,23,-59, 28,-28,51,-9,-3,-47,9,-44,-50,0,2,8,-53,6,-40,-19,26,-5,13,-51,-35,-14,-15,10,-67,7,-9,12,-88,-64,20,-124, -110,-12,-26,-23,32,-1,42,-30,11,17,-11,29,-127,14,30,-53,21,-27,6,-33,24,-29,-8,9,-15,2,11,29,21,28,-14,23, 
  /* [9][0][][] */ -6,-42,-127,-27,34,-39,-39,-37,-6,-57,-36,-38,-26,-37,13,-18,14,-3,10,-38,-6,22,-11,-16,-17,13,-9,-54,-11,-15,4,12, -6,-54,-57,-9,-8,-36,-53,-29,-8,-48,-95,-33,-15,23,16,2,21,-3,31,-23,-4,16,12,25,-2,14,-5,-81,-25,-9,11,16, 26,-21,-34,-12,7,-14,-29,-28,-5,-42,-83,0,10,8,-50,13,0,11,45,5,-2,25,18,10,9,-30,-1,-73,-11,-6,27,-14, 
  /* [10][0][][] */ -17,55,-101,-58,-17,-27,32,23,22,30,-76,-12,5,-16,-1,19,-127,-3,-102,12,-12,-5,-9,-71,-21,-27,-53,-25,17,-15,-20,5, -33,13,-29,-21,-10,-17,34,-30,11,-2,-6,7,-9,26,-6,-8,-83,-53,-29,-9,-32,-29,7,-22,-26,-48,-3,25,-19,-2,-6,31, -43,-25,0,27,14,17,18,-2,27,15,29,18,-19,20,-1,-16,-51,-26,-6,-25,-3,-29,-24,18,1,5,27,35,-29,23,-23,22, 
  /* [11][0][][] */ -52,26,-7,0,-3,16,-20,-6,7,26,15,23,-39,21,24,-44,18,-19,8,-5,-12,-12,-4,-1,-21,21,-4,36,-16,1,-17,3, -43,-9,6,5,-12,-17,-43,-14,13,-24,-5,-36,-88,-4,9,-85,-5,-30,26,-11,-25,-4,-23,-8,-67,-7,-2,-2,-40,17,-48,19, -20,-43,29,-11,-6,-4,-14,-67,-26,-7,54,-20,-127,-33,9,-47,46,-80,51,-29,-33,7,-44,1,-65,39,8,-11,-69,0,-13,10, 
  /* [12][0][][] */ -127,-14,42,10,10,-7,-71,16,14,14,-13,27,-92,10,3,-77,-36,5,-14,-18,-8,-65,1,-3,-22,13,6,32,-17,8,-69,7, -30,2,-9,-19,13,13,-3,6,-1,3,1,23,-9,13,-38,-11,-62,9,-43,18,13,-9,23,11,12,-22,-1,18,-8,7,-39,15, -46,27,-55,-49,-12,13,33,53,-5,-4,-14,-10,1,-25,-78,19,-20,0,-114,-4,19,-18,0,-66,14,-14,-43,-44,10,1,-17,-10, 
  /* [13][0][][] */ -38,15,-11,1,-127,-32,-74,21,31,9,-9,-39,2,-41,12,9,36,-11,-33,-6,-100,-5,2,-47,-13,6,-61,19,-40,-80,-4,-31, -69,9,12,0,-37,-31,-69,-26,14,15,-33,-2,-77,9,-9,-58,28,-10,19,-26,1,-7,18,0,-59,12,3,18,-44,-23,0,10, -74,15,12,-12,-8,23,-81,56,42,-25,11,-3,31,-3,-39,-39,-30,26,-7,3,19,-40,-5,-13,-2,-11,24,3,-75,21,-16,33, 
  /* [14][0][][] */ -27,19,-53,-13,-29,-48,-28,-53,-60,-34,42,-75,-34,2,40,-6,20,-31,-7,-22,-46,4,-17,-55,-8,47,-38,-24,-68,-46,4,-31, 13,4,-29,-37,50,-58,17,62,19,-127,-34,-57,37,-40,73,-28,15,34,12,-61,-7,7,-26,26,-25,-18,8,-100,-56,-27,-13,-6, 2,-25,55,37,41,12,17,-13,-78,15,51,68,12,8,-5,-2,30,-74,-71,20,-21,1,-1,17,-31,36,-17,69,-1,-57,8,-86, 
  /* [15][0][][] */ -21,18,3,-18,-54,23,-11,-3,-11,23,-19,-6,-5,39,-19,23,42,5,35,4,13,32,4,-43,-7,32,-101,-37,16,-70,25,-29, 8,-17,36,-34,27,-16,22,26,-82,-10,13,-38,-7,-24,11,-23,19,16,57,-10,-1,-3,-37,45,-19,-27,-87,-19,1,-93,2,17, 21,24,-72,-89,-94,1,-9,37,-97,-21,19,-94,-6,-58,54,10,-14,11,-15,13,-25,21,0,-50,5,7,-81,-75,-25,-127,6,1, 
  /* [16][0][][] */ -45,24,-102,10,43,-5,-37,41,8,-23,-53,23,-22,-13,51,9,-9,23,4,-17,11,-13,12,-12,-19,-25,-9,22,-18,21,-4,17, 13,-31,-37,-61,-62,-26,-23,-13,21,-77,-68,-127,-14,19,-16,7,21,-1,26,-10,-43,-19,-5,40,0,-6,-18,-64,-57,-6,6,17, -15,-32,20,-15,46,-33,-11,-33,7,-46,-31,47,4,-24,-74,20,29,-17,-34,56,-54,0,20,11,23,17,6,22,-48,3,22,4, 
  /* [17][0][][] */ -22,2,-80,-23,-36,17,-4,-36,23,-32,-11,-35,29,23,4,15,-15,21,4,19,-3,17,35,-42,-7,-23,10,-62,24,-5,19,43, 19,-19,-41,-54,-36,15,-25,-44,5,-3,-6,-15,0,-25,-51,13,-47,-5,-39,1,28,-18,-1,-37,17,-37,-36,-5,-22,-12,8,33, -23,4,-40,-58,-15,27,-43,26,-23,12,-30,-16,9,-37,-34,-10,-62,-20,-127,-6,3,-11,1,-79,19,-38,-55,-53,17,-9,-3,-24, 
  /* [18][0][][] */ -71,5,42,26,-1,-41,74,8,-100,55,27,27,-51,-39,4,1,15,-38,-57,25,-58,17,-65,20,-5,-17,-81,44,10,-72,-27,-118, -40,7,0,28,-30,-23,-38,8,-35,-4,30,32,-23,-66,-12,7,20,-23,-33,-11,-39,19,-18,-31,-18,1,-88,15,15,-54,-15,-66, -16,26,24,4,-41,-5,-54,26,1,43,8,2,37,-75,-1,62,30,-18,-127,36,-43,25,-4,-80,46,-2,-68,-34,-27,-30,17,1, 
  /* [19][0][][] */ 12,22,-11,-25,-27,-1,-25,-8,29,-11,-19,-7,44,12,-19,9,-66,21,-82,26,12,13,18,-54,8,-25,-19,-32,9,-3,24,47, -11,-44,28,-6,6,-6,9,-57,-7,1,2,2,-17,5,-3,-33,-55,-28,-22,-16,4,-38,-9,-41,-32,-53,8,10,1,5,-9,-30, -127,-21,13,3,23,-3,3,11,-9,8,3,18,-103,-16,13,-69,-23,-27,-36,-18,1,-24,-68,-23,-23,-3,10,11,3,11,-68,-7, 
  /* [20][0][][] */ -12,57,-87,-56,17,-36,91,31,-61,23,-67,2,-16,13,8,-9,-50,-42,-2,-10,4,27,-65,0,-24,-59,-17,4,28,-25,-16,-61, -92,0,-85,-69,23,32,-4,6,50,5,-45,29,-10,-11,-35,-8,-21,8,-15,43,48,-50,-77,33,-19,0,36,9,13,11,-64,65, -105,19,-69,46,-34,15,-6,-17,29,6,6,5,-34,-81,19,-18,46,-51,6,45,7,-7,-65,-43,-25,6,8,-3,7,0,-127,-36, 
  /* [21][0][][] */ -52,-26,-8,22,48,19,-50,51,-2,21,20,-6,-67,68,30,-47,21,12,10,-4,22,-24,-21,18,-10,14,19,41,-26,29,-50,31, -11,45,-17,-78,-36,11,-11,36,-18,-9,-51,-69,-9,-11,-15,7,-32,-12,-35,30,-10,0,-7,-37,-4,-1,-39,-60,-5,-15,16,-39, 10,30,44,-19,11,-37,13,-23,-22,-21,-54,45,22,1,-65,10,-33,-9,-64,-5,-7,5,19,-20,-8,-48,17,-18,0,-91,13,-127, 
  /* [22][0][][] */ -71,3,-37,-2,-47,-32,-96,-57,-31,2,14,-94,-68,-37,34,8,29,-60,33,-6,-81,38,13,12,-63,24,-12,13,-127,-28,34,14, -19,-51,8,-9,39,18,-20,-28,-11,-25,5,6,30,34,-18,-45,-3,-43,28,13,-3,-28,52,21,-46,5,18,-6,-52,14,33,7, -46,57,-48,-9,13,-9,-50,34,15,-43,-4,-23,-97,18,8,-74,-13,-7,21,-25,-6,-2,-40,-34,-42,2,-5,-14,-5,13,-48,-24, 
  /* [23][0][][] */ -40,-76,-7,20,7,22,-25,-24,4,-5,17,0,-56,-53,24,6,16,-17,-38,2,40,-16,7,-32,18,33,-12,0,8,-33,22,-42, -19,-71,50,42,-22,-14,-103,-12,0,10,-19,12,-81,-61,42,33,34,-15,-51,-15,2,-14,17,-127,-4,25,-15,8,15,-13,-23,-78, -28,-60,30,-2,9,10,-104,-5,4,-4,34,-37,-23,-25,-35,3,22,1,-80,8,26,21,32,-44,50,31,-11,-7,-15,-24,38,-23, 
  /* [24][0][][] */ -6,-21,32,-1,11,10,35,29,-101,41,48,40,-10,-83,21,2,36,-5,-1,23,29,16,-10,-31,-3,30,-117,27,45,-94,-43,-127, 0,-34,-42,-1,8,-13,-5,15,-31,-6,-6,2,-2,-38,-49,6,-40,55,-37,2,36,24,4,16,-8,6,-44,-14,-48,-24,0,8, -7,5,-31,-62,35,6,8,-20,-41,5,-32,-6,17,33,-72,15,-11,31,-94,39,68,0,13,-36,16,16,-32,-30,18,-40,22,-2, 
  /* [25][0][][] */ -39,-35,-23,-69,19,-104,22,8,-10,-78,-45,-111,-89,4,-29,-8,36,-19,30,-39,-34,25,5,30,-15,29,7,-42,-109,-65,10,-13, 48,-18,-34,-27,33,1,24,-23,-50,-78,-49,-3,-8,25,-127,-21,-1,-30,-33,-81,-3,20,-2,29,-34,-27,25,-33,-48,16,20,-13, 32,-12,-16,46,23,6,-7,-26,-34,4,24,27,26,-12,28,-40,-104,-56,-60,-21,7,-49,-13,-4,-36,-63,14,1,25,-10,-26,-55, 
  /* [26][0][][] */ -85,51,33,10,41,5,-55,49,13,45,20,33,-9,34,21,-35,-12,35,-5,10,33,16,-51,-14,-19,32,8,45,-3,27,-83,-34, -61,29,-21,-14,9,13,43,5,14,-8,-38,-9,-24,-46,-14,-65,-14,-3,53,16,-33,-29,-36,-37,-62,-4,-4,8,-15,0,-127,-31, -22,6,-76,0,-1,-28,-10,-19,6,-27,-73,-15,-37,30,14,-102,-22,-12,70,-41,-18,-46,-104,-9,-81,-43,16,1,-30,15,-75,22, 
  /* [27][0][][] */ -46,-21,-65,9,-6,35,-127,57,29,26,-12,-5,11,8,18,34,-56,15,-124,21,54,0,45,-67,-2,28,5,39,32,25,-4,-31, 31,6,-49,-1,-30,17,-35,60,13,-30,-20,-37,-8,6,36,-16,8,-7,-26,18,18,9,-19,-73,-11,-5,12,-23,-10,-16,6,-51, 15,-15,63,-4,35,-120,39,-2,-6,-53,-88,-1,-1,24,28,-5,-7,-4,31,-52,-47,37,-22,55,-71,-29,-10,-16,-107,-71,6,-115, 
  /* [28][0][][] */ 24,10,36,-29,-9,10,4,-13,17,-64,-39,-11,23,36,-48,2,-1,16,40,11,16,9,3,4,6,-21,12,-95,1,27,15,73, 14,-40,30,-12,-29,-32,-15,-42,3,-11,1,-4,7,5,-53,-25,-33,23,10,-6,-21,-19,5,-17,-16,-80,-36,-32,-21,-51,-10,-1, -85,-29,40,4,22,-37,20,-70,-123,18,22,18,-32,8,11,-127,-43,-117,-9,-55,-24,-75,-43,-10,-110,-45,-23,15,-20,-16,-54,-104, 
  /* [29][0][][] */ -76,30,-58,26,-69,11,-94,32,47,43,12,27,-10,-26,59,-39,17,51,2,28,-11,23,0,-33,-13,26,-25,9,-8,-1,-62,28, -2,5,58,-21,-76,-76,-15,-7,-7,-9,-4,-7,-20,-8,-1,-52,6,-20,51,-17,-54,11,-26,7,-127,-10,-46,-53,-26,-38,-16,-22, 32,-16,-1,-54,-98,-39,-19,-92,-60,-53,6,-75,-6,-80,5,-60,-25,20,15,6,-12,-28,-83,-7,-2,-31,-66,-7,-92,-19,-5,42, 
  /* [30][0][][] */ 12,1,-123,-23,-18,-43,67,-88,0,-21,-87,-19,9,-105,-23,-14,23,-44,51,-9,-81,53,-24,30,-23,-36,-90,-46,-10,-82,3,-21, -15,3,-100,-66,-24,-68,24,-16,-57,13,-40,-8,-15,-52,-6,-7,-14,-15,35,-10,-5,14,-32,16,-23,-30,-55,-36,-21,-53,-12,10, 22,8,-127,-90,-97,-61,13,17,-29,5,-36,16,12,-91,-67,17,-89,30,-64,5,27,-35,-25,-43,34,-83,-63,-125,14,-25,10,43, 
  /* [31][0][][] */ -42,77,-47,-4,-21,-2,-53,-9,45,7,13,-71,13,-39,-45,33,-25,13,-104,47,1,22,3,-127,36,29,7,-55,14,-9,5,40, 11,-25,17,-28,-35,-43,-29,-32,19,-21,0,-7,15,16,-49,-3,3,16,-55,11,-31,13,-14,-7,-35,22,-9,21,-16,-51,23,-39, -42,-122,25,16,7,2,23,-15,-13,-20,19,18,-52,8,33,-107,19,-80,-11,-53,56,-61,-11,37,-100,5,13,-5,-42,9,-29,8, 
  /* [32][0][][] */ 82,55,-18,-40,111,-90,89,-99,-94,-75,-127,7,23,-12,84,-43,-60,4,42,-126,-114,-56,-34,-26,-74,-103,-33,-34,-35,-7,-40,6, 10,2,-25,-28,38,32,48,-71,-66,-78,-32,-1,-38,-66,5,-89,-1,-49,7,-34,-78,-45,-14,-9,-82,-26,-7,-22,-93,-17,-10,5, 16,4,-4,-40,-9,18,-10,-70,-102,-25,-71,-37,-45,81,-30,-16,35,0,-32,22,22,-71,81,15,28,24,57,20,-49,10,36,-1, 
  /* [33][0][][] */ 17,-24,11,-118,82,-26,78,-47,-106,11,-41,-12,-6,-61,-60,9,-19,-32,9,-68,-26,4,-57,20,-18,-75,-127,-76,9,-106,-14,-25, 18,-24,-88,-49,13,8,0,-21,-34,4,-13,-50,-2,-35,-51,-18,-17,42,50,-15,22,9,4,55,12,-42,-100,-66,3,-67,5,21, 20,-43,-38,-11,-96,1,-62,-5,-41,34,0,-94,-23,30,-50,49,1,17,-37,68,-42,39,41,38,26,7,27,-6,-26,-65,23,27, 
  /* [34][0][][] */ 15,33,-9,-116,37,-115,29,-32,-30,-78,-13,10,-31,-27,-47,-57,27,-17,6,-86,-7,18,-74,-14,-36,18,-34,-18,-63,1,-18,-118, 30,45,-70,-55,42,-50,56,-29,-78,-25,-66,2,29,5,-25,-28,-34,24,-16,-78,7,-33,-35,-3,-12,-65,10,-25,1,-2,-3,-62, -35,23,-44,6,38,21,40,18,8,-12,3,43,5,-1,45,-66,-121,-46,-55,-10,32,-127,-25,34,-74,-2,29,33,13,13,-55,-33, 
  /* [35][0][][] */ 8,36,-10,-10,-47,-83,59,62,30,-15,-22,-8,24,-2,43,-37,-35,7,16,40,-71,-24,13,26,-61,10,-69,17,-39,-68,-29,4, 18,67,-2,-26,-25,-112,12,-38,-83,-10,-15,8,10,17,-57,-23,-37,-5,37,14,-29,-35,-72,-9,-27,-100,-91,7,-24,-65,-21,-12, 35,31,70,-16,2,-92,51,-32,-18,-8,-10,24,21,-32,-69,6,-19,3,54,-11,-32,-19,-28,-2,11,-127,-29,-25,-3,-19,4,19, 
  /* [36][0][][] */ -113,-25,3,12,31,27,-110,31,-6,3,5,39,-71,25,27,-4,5,-9,17,0,11,29,38,-11,-22,20,35,34,15,17,-7,-55, -40,9,-52,0,-12,-4,-35,19,-11,0,-11,-50,-42,-26,7,-1,-3,2,36,-43,-21,31,-10,-21,-8,2,-1,-19,1,13,11,-5, -17,17,21,-71,-127,-13,-37,18,-18,-3,-6,3,34,14,-93,-6,5,9,-12,18,-1,1,8,-32,-6,7,-40,-29,19,-99,21,-40, 
  /* [37][0][][] */ -76,0,-27,-2,29,14,-18,26,20,18,6,32,-16,-47,40,-10,-51,8,3,-26,9,-56,-120,-44,-6,-29,-23,25,48,-5,-76,5, -15,-11,-47,-15,-24,17,3,20,37,-12,-22,-14,-21,-42,43,-39,-1,11,16,-22,-1,-12,-17,-61,-14,17,12,-7,-7,0,-5,10, 20,9,-44,-68,-127,-2,39,16,21,-24,-54,-39,0,-52,-64,3,-47,1,-20,10,-5,-8,22,-46,16,-6,-27,-76,-21,-22,4,29, 
  /* [38][0][][] */ -127,-37,-13,13,-17,-12,-31,-54,-67,2,-2,-3,-125,29,5,-84,-15,-54,10,44,-28,-71,-19,21,-58,15,16,26,-37,-4,-123,20, 9,-20,27,-1,-6,-11,19,5,-20,10,10,2,-12,11,5,-10,-23,0,-3,-12,8,-86,-15,9,-13,2,-1,8,17,3,-58,11, -16,2,-16,-8,-3,11,43,11,10,31,32,25,15,12,0,15,-6,13,-52,3,27,-32,-12,35,14,15,20,22,-1,15,-62,35, 
  /* [39][0][][] */ -66,-79,-24,13,49,41,-19,32,-17,-9,6,6,-8,-17,16,-33,-60,-3,-17,-26,35,-49,-99,-30,-7,5,21,3,-5,15,-127,-55, -12,-73,-123,12,-15,13,-36,-7,8,-4,-13,1,-44,-68,42,-56,24,-5,-8,-49,15,-10,-62,-42,-32,16,-16,13,20,9,-16,-22, -18,-85,-86,-23,-44,11,6,-15,36,-50,-75,-59,23,-1,3,-45,-22,28,-13,-3,25,-83,-16,-1,8,-37,17,-29,-4,18,-4,58, 
  /* [40][0][][] */ -125,-30,-94,23,17,38,-57,51,-14,-29,-14,13,-19,-9,40,3,-8,-3,-127,29,12,-9,70,37,5,15,30,7,-3,24,1,-51, -50,1,-62,9,2,32,-116,-22,-44,26,58,0,-25,17,-6,25,4,-58,-119,11,-15,32,4,-46,25,0,-31,22,-9,-37,40,-22, -26,35,-17,45,28,-39,-47,0,-58,23,10,15,17,6,22,-17,16,-53,-37,12,-7,13,37,-40,14,56,-8,5,-24,-11,47,-18, 
  /* [41][0][][] */ -91,-12,33,19,17,29,25,4,13,23,29,11,-39,-3,11,-24,5,-10,-22,25,9,-12,-40,-11,2,39,11,27,-7,-2,-45,20, -56,8,9,29,-13,0,-105,-8,-3,22,11,1,-28,-68,24,-13,39,-9,8,22,-12,8,-20,-13,-10,-5,-37,36,1,-21,3,-33, 21,3,-2,-25,-115,-64,-47,-27,-60,11,6,-8,11,17,-75,11,37,-27,15,25,-62,24,9,-2,-14,15,-57,-55,-22,-127,11,-88, 
  /* [42][0][][] */ 0,40,19,-21,22,-15,59,12,-59,-13,-8,17,15,39,-47,6,-58,-12,-3,20,-13,-17,17,2,-8,-10,-19,-28,17,-68,10,-33, -14,18,7,-5,-11,0,4,25,-6,19,35,26,-16,16,-45,-13,-10,-28,-22,-21,-31,-27,-38,-26,-12,35,-63,25,-9,-36,-43,-19, -17,14,-60,-63,-27,-47,-18,19,25,-11,-17,-18,25,-50,-65,7,25,23,-44,7,-19,-13,-10,-55,19,36,-127,-42,29,-87,5,42, 
  /* [43][0][][] */ -71,-36,-47,18,49,16,13,37,55,19,33,3,-60,-101,51,-17,-82,-22,-17,-3,-1,-105,-53,-81,-31,-60,-6,16,11,5,-58,-27, -17,-21,-88,-18,-77,-8,-21,-58,15,-25,-55,-64,-1,-20,68,-32,49,-3,-4,-64,22,-52,-33,-123,-22,0,7,-15,-27,13,0,3, 8,-7,-5,-8,-21,33,-15,-49,9,11,-26,37,32,-43,-106,6,-127,25,-85,34,41,-83,-4,-107,41,-86,-27,-13,29,-12,13,35, 
  /* [44][0][][] */ 9,-32,56,-2,3,-23,87,-16,23,-15,-19,-10,-37,-7,-22,-70,-9,-7,46,-58,-3,-8,-26,42,-59,-14,5,-8,-46,-4,-42,20, -30,-17,-1,16,9,11,16,6,-15,20,-13,19,-32,-23,12,-30,22,2,31,-28,9,-32,-89,-1,-17,-10,-13,11,25,-8,-80,-18, -9,-32,50,2,20,-9,2,-2,-14,4,-15,15,4,-28,15,-12,-57,16,-8,-18,3,-127,-99,5,1,-41,9,26,3,17,-41,-7, 
  /* [45][0][][] */ -40,-10,40,-102,-50,3,-52,14,2,-3,-34,22,-20,-23,-74,0,21,28,16,9,48,3,-34,38,6,6,-93,-51,16,-51,-26,-35, -23,-37,-64,-104,5,-5,-22,15,-46,-6,-47,-25,-15,3,-73,-2,56,18,64,34,33,34,-10,29,-11,17,-54,-40,1,-29,11,14, 33,-5,75,-32,-27,0,12,53,-15,10,17,26,-2,-127,-90,-5,-40,87,-11,43,42,-3,-68,-2,19,-43,-76,-34,49,-15,-2,49, 
  /* [46][0][][] */ -14,-11,21,-105,-37,-1,-9,-31,29,-96,-77,-42,9,2,-127,-30,-21,17,-37,-15,13,-78,-35,-2,24,-46,1,-6,-62,13,-5,65, -39,24,-7,-28,-31,2,-55,14,-11,-41,-43,-39,30,57,-97,-6,-6,16,-126,40,4,12,18,57,2,-4,5,38,-26,-32,-16,4, -59,-35,68,-107,-115,3,-17,39,2,-3,-20,-93,-40,35,-90,6,31,50,12,34,27,31,-29,35,10,17,3,-60,-41,19,0,81, 
  /* [47][0][][] */ 91,-40,-66,-12,-15,46,-93,-29,7,-56,-32,-44,60,16,-49,-55,27,22,-46,3,6,-35,-1,-11,-39,-20,37,49,-127,-3,-13,45, -74,-118,-27,-16,-47,41,-94,45,36,-53,29,-69,-31,-26,-80,-53,31,-1,-59,51,7,-12,31,-6,18,15,-6,-28,-99,4,-4,5, -75,-27,-15,-19,-45,16,-124,54,10,-10,8,-21,-19,43,-70,24,31,-9,-80,-9,-13,-9,25,36,21,36,45,28,-62,24,31,9, 
  /* [48][0][][] */ -38,-31,46,-78,-24,-34,-37,6,-19,-67,3,-76,-2,24,-81,-8,13,-9,-16,-11,-16,-2,15,47,-6,3,-12,-20,-46,-36,40,-27, -35,-2,22,-43,27,-16,-36,-7,15,-31,-60,-21,-14,27,-11,-25,-11,6,10,14,-11,-20,-3,8,-18,-9,13,10,2,11,-9,-11, 6,-26,-46,-68,30,-27,-10,-20,21,-44,-127,-11,-3,-22,-41,-29,8,33,9,-2,5,-14,-9,-5,0,-21,-12,-26,-9,8,11,33, 
  /* [49][0][][] */ -56,17,40,21,24,-6,-73,30,-13,27,36,-14,-24,-32,20,-5,-12,-7,-62,13,-27,10,6,-80,15,29,-36,19,-16,8,-2,-24, -10,8,-16,-47,-40,-22,-46,28,0,12,-50,-46,-1,38,-65,0,-42,5,-67,3,-19,-2,12,-48,-1,-21,-62,-57,-4,-47,21,-49, 14,3,62,25,37,-10,11,7,-10,-13,-24,16,-6,34,-64,-2,-26,15,-54,13,10,26,26,14,12,-7,5,35,-16,-69,10,-127, 
  /* [50][0][][] */ -88,5,57,-14,-36,11,-120,-55,-127,15,-15,14,44,47,2,-8,-69,36,-111,40,-32,-54,84,-76,2,31,7,41,2,-82,-5,-26, -45,-15,1,51,51,-38,-79,-50,-58,8,16,3,-64,21,18,-66,-46,-30,34,-33,-37,-57,-7,-16,14,12,49,18,-57,38,2,-3, 53,-6,-7,-1,18,-29,66,-6,-13,-5,69,29,18,11,-45,-11,-5,29,-60,-6,-3,-30,-4,-62,0,59,-5,-21,24,-2,-44,65, 
  /* [51][0][][] */ -23,-25,33,-31,85,-12,11,6,-3,-127,-39,-108,8,20,-27,22,27,11,25,-22,-35,0,34,42,12,8,6,-52,-92,-9,20,36, 7,10,-16,-95,8,23,15,2,16,-61,-84,-73,-19,26,-94,-3,-22,-11,7,10,-25,-38,-18,22,-9,-18,-5,10,-63,8,-32,14, -23,2,58,-6,-37,13,0,40,17,-61,-23,-23,-41,28,-93,-49,37,20,7,44,-42,-29,-16,20,8,37,-12,24,-106,-8,-26,45, 
  /* [52][0][][] */ 34,-40,-62,-112,-31,9,63,-10,-81,-40,-112,-24,-7,-49,-81,-3,25,-22,46,-58,6,-1,-11,63,-13,-43,-62,-62,2,-62,22,-14, 16,-18,-127,-63,-39,-25,-2,53,-44,-20,-42,16,20,-19,-26,4,-43,27,-13,-1,5,-4,-16,-47,2,-18,-54,-60,0,-33,10,-12, 13,17,-89,-38,-38,3,-3,-10,-51,16,-85,25,19,16,7,0,-112,15,-79,-6,37,-66,22,-55,28,-77,38,13,29,-16,10,-27, 
  /* [53][0][][] */ 7,-2,123,-79,-2,-17,-33,-11,-50,-61,-44,-12,1,32,15,16,56,-47,29,-29,-11,6,5,55,-23,8,-37,-70,12,-64,45,-34, 5,-11,11,-33,-9,-57,-47,-12,-40,-49,21,-110,-4,18,30,-9,5,-4,6,11,-22,14,5,36,16,-39,-17,-85,10,-23,-17,10, 24,5,39,-71,-60,-20,-37,-22,-64,-72,17,-127,3,-27,60,-16,3,-59,8,28,-120,37,25,4,-48,24,-41,-50,-83,-84,8,-41, 
  /* [54][0][][] */ -16,-127,79,-71,-56,-53,10,-52,-50,-61,-44,-47,-98,66,-76,-99,56,-59,70,6,13,-11,-11,82,-33,15,6,-15,-70,-20,4,37, 46,-53,-25,-89,21,5,4,-58,29,-13,-82,-68,-13,-29,-66,-24,-16,46,0,36,38,-40,-56,20,-2,-37,-10,-43,14,2,-24,32, 4,71,64,-62,-28,-37,-46,-22,-51,-15,-95,36,46,-5,-100,-22,-43,23,-94,14,-9,-40,4,-39,-24,-53,-25,-77,0,-80,-15,-65, 
  /* [55][0][][] */ -127,-29,25,22,-7,1,-67,-18,-45,-5,2,5,-69,30,2,-18,10,-22,7,1,-10,-10,23,17,-19,21,16,14,-20,18,-8,-29, -52,-32,8,-5,10,-6,-56,7,-24,-1,2,4,-33,8,1,4,-16,-12,6,-8,5,-50,-20,-22,5,-11,6,-6,17,20,-26,-25, -32,-31,2,13,5,-7,-1,-55,-47,18,21,16,-31,-11,20,-8,16,-51,-9,-11,1,-23,-5,-51,-28,18,-2,-3,6,-20,-41,-28, 
  /* [56][0][][] */ -15,11,-87,-12,11,21,-9,41,21,-17,-1,-19,11,54,5,-7,-25,10,11,30,24,17,11,33,-22,24,25,9,0,10,0,16, -2,22,-127,0,20,-5,-17,-1,12,-32,-26,-34,11,-29,36,-39,-17,-8,24,-1,-29,-10,-29,-37,-42,-14,10,0,-2,-1,-42,-5, 23,-10,-32,-43,-3,-33,7,-50,5,-40,-18,-37,-46,-97,12,2,7,15,47,-47,7,1,-69,-20,18,-12,-20,-50,-33,17,17,35, 
  /* [57][0][][] */ -44,-95,-24,1,39,36,-15,-10,-48,9,28,-14,-119,-14,-9,-18,15,-4,41,19,8,-22,10,27,2,2,-3,23,-31,2,-5,23, -66,39,-59,3,-23,3,-127,1,-25,-1,-5,-16,-99,14,40,-30,22,-115,18,49,-14,13,50,23,-16,25,-23,27,15,-40,-6,14, -85,19,4,5,22,-25,-49,-6,-57,-33,-19,-7,-118,25,28,-70,-11,-88,-7,-29,-4,-14,11,29,-93,12,23,7,-44,-6,-41,-25, 
  /* [58][0][][] */ -92,-105,68,-46,-36,-23,92,-53,85,-39,33,-41,-84,-55,11,-127,-6,31,105,-99,-54,3,-68,38,-63,-3,-83,-33,-78,-41,-108,34, -40,-43,29,-16,-11,-44,-1,14,-54,34,-6,-8,-108,-8,24,25,-16,6,-39,-17,-3,-22,-36,-27,16,-13,-50,11,-6,-7,-72,-9, -96,10,77,-12,20,53,-20,23,-5,10,-18,9,-21,14,21,31,-16,4,16,11,15,-10,-36,13,15,20,21,27,15,48,-41,-15, 
  /* [59][0][][] */ 10,19,-29,15,9,31,-28,3,-28,24,-38,48,18,51,12,-7,-88,-51,1,17,19,-55,-2,-25,-31,-23,17,7,34,13,-4,-5, -26,-40,-75,10,-2,23,-60,-22,6,-41,6,8,-17,-3,26,-50,-4,-61,4,-7,-16,-30,-45,-27,-49,24,20,22,-21,11,-56,-7, -16,-11,-39,11,-18,-11,-79,-55,13,-41,9,29,-127,-21,30,-100,59,-41,63,5,-33,38,-47,-27,-60,-7,-4,-11,-36,10,-41,14, 
  /* [60][0][][] */ 21,-11,13,4,39,-34,75,18,-29,-81,-17,-8,9,19,-74,-64,-68,-11,42,-14,12,102,38,126,-48,-22,72,-31,-114,26,34,-17, -17,-31,15,42,33,-33,74,-17,-48,1,51,-8,43,-47,-66,-17,-95,-42,-119,42,-22,-48,-10,41,-32,36,15,30,-21,17,0,-19, -116,46,-79,-43,-77,11,-97,55,34,-10,-1,-61,-14,-96,18,13,-19,-25,-47,50,-37,41,-39,-71,25,46,-127,-36,-20,-43,-32,-23, 
  /* [61][0][][] */ 89,-65,8,-67,-75,-56,-14,-58,-127,-40,-70,-33,22,15,-88,-11,-36,-37,10,-72,-27,-7,29,13,-62,-37,-6,-15,-55,-88,29,-32, -61,-66,-16,2,49,33,34,-6,28,-25,-13,36,-32,8,-16,-45,-23,-12,-53,8,0,-45,6,27,-34,66,18,13,-54,32,1,-19, -60,53,-67,-2,-13,30,45,59,45,2,5,37,-17,-41,14,12,-22,31,-52,27,16,35,-33,-47,29,14,-32,-18,0,-4,-16,52, 
  /* [62][0][][] */ -99,-3,-49,-44,39,53,-42,14,-110,-28,-73,-2,-18,87,-66,11,-72,-4,19,33,73,2,41,32,14,4,0,62,14,18,28,-17, -80,22,-82,1,58,-8,-25,35,-4,6,-37,22,-89,-11,25,-59,-127,56,9,-22,-7,-8,-14,-58,-84,-44,-6,26,-3,4,-69,-75, 64,45,-35,-12,-63,-1,35,43,20,-38,-24,-43,-55,-118,38,11,-107,39,71,-11,-4,-40,-69,-45,19,-94,-22,-32,-70,22,46,50, 
  /* [63][0][][] */ 0,-103,17,-18,-26,-13,-82,-71,-54,-8,41,-28,4,-28,-52,34,26,10,23,-16,26,44,-5,-52,28,-20,-93,-36,-2,-95,-3,-77, -41,-62,97,14,40,12,-27,15,-8,17,-3,-14,-63,-67,14,31,-54,-6,-20,-45,16,29,-10,-10,15,-42,-59,21,18,-62,23,-39, -46,-27,41,9,10,28,-116,29,38,-11,35,25,-63,-31,-21,29,11,18,-18,-33,25,61,40,-127,23,74,-7,25,16,19,20,-65, 
};
const TfArray<4, int> tensor_dimension14 = { 4, { 64,1,3,32 } };
const TfArray<64, float> quant14_scale = { 64, { 0.0083266822621226311, 0.0048411507159471512, 0.0046823034062981606, 0.0051000700332224369, 0.0074298442341387272, 0.0056244353763759136, 0.0044573796913027763, 0.0070215673185884953, 0.0063807056285440922, 0.0088221030309796333, 0.0070741917006671429, 0.0080217691138386726, 0.008873659186065197, 0.0069279484450817108, 0.0057582962326705456, 0.0073421183042228222, 0.0065124575048685074, 0.0068206149153411388, 0.0046106427907943726, 0.011210032738745213, 0.0049691195599734783, 0.0063862903043627739, 0.0066416780464351177, 0.0060546179302036762, 0.0047393050044775009, 0.0083862300962209702, 0.0060074399225413799, 0.0050546145066618919, 0.0092759579420089722, 0.0075555182993412018, 0.006515400018543005, 0.0059562269598245621, 0.0050130570307374001, 0.0055189207196235657, 0.005635277833789587, 0.0051440387032926083, 0.0063975960947573185, 0.0071548325940966606, 0.0072777755558490753, 0.0069312979467213154, 0.0047427280806005001, 0.0074839973822236061, 0.0067305667325854301, 0.0050603831186890602, 0.0083243455737829208, 0.0049575683660805225, 0.0044398610480129719, 0.004928959533572197, 0.0092741558328270912, 0.0076265260577201843, 0.0040666316635906696, 0.0050386581569910049, 0.0062317629344761372, 0.0060736807063221931, 0.0057028280571103096, 0.010061443783342838, 0.0078504886478185654, 0.005584517028182745, 0.0049179033376276493, 0.0053622196428477764, 0.0040937187150120735, 0.0052212807349860668, 0.0042353766039013863, 0.0044488636776804924, } };
const TfArray<64, int> quant14_zero = { 64, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,1,200,3 } };
const TfArray<1, float> quant15_scale = { 1, { 0.2177690714597702, } };
const TfArray<1, int> quant15_zero = { 1, { -13 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,200,8 } };
const TfArray<1, float> quant16_scale = { 1, { 0.14346528053283691, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,100,8 } };
const TfArray<1, float> quant17_scale = { 1, { 0.14346528053283691, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,1,100,16 } };
const TfArray<1, float> quant18_scale = { 1, { 0.23597125709056854, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,1,50,16 } };
const TfArray<1, float> quant19_scale = { 1, { 0.23597125709056854, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<4, int> tensor_dimension20 = { 4, { 1,1,50,32 } };
const TfArray<1, float> quant20_scale = { 1, { 0.28081166744232178, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<4, int> tensor_dimension21 = { 4, { 1,1,25,32 } };
const TfArray<1, float> quant21_scale = { 1, { 0.28081166744232178, } };
const TfArray<1, int> quant21_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<4, int> tensor_dimension22 = { 4, { 1,1,25,64 } };
const TfArray<1, float> quant22_scale = { 1, { 0.22862677276134491, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfArray<4, int> tensor_dimension23 = { 4, { 1,1,13,64 } };
const TfArray<1, float> quant23_scale = { 1, { 0.22862677276134491, } };
const TfArray<1, int> quant23_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const TfArray<2, int> tensor_dimension24 = { 2, { 1,832 } };
const TfArray<1, float> quant24_scale = { 1, { 0.22862677276134491, } };
const TfArray<1, int> quant24_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const TfArray<2, int> tensor_dimension25 = { 2, { 1,16 } };
const TfArray<1, float> quant25_scale = { 1, { 1.0969827175140381, } };
const TfArray<1, int> quant25_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const TfArray<2, int> tensor_dimension26 = { 2, { 1,16 } };
const TfArray<1, float> quant26_scale = { 1, { 2.0012636184692383, } };
const TfArray<1, int> quant26_zero = { 1, { 20 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const TfArray<2, int> tensor_dimension27 = { 2, { 1,16 } };
const TfArray<1, float> quant27_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant27_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,2 } };
const TfArray<1, int> outputs0 = { 1, { 15 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 15,11,3 } };
const TfArray<1, int> outputs1 = { 1, { 16 } };
const TfLitePoolParams opdata2 = { kTfLitePaddingSame, 2,2, 2,1, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs2 = { 1, { 16 } };
const TfArray<1, int> outputs2 = { 1, { 17 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 17,12,5 } };
const TfArray<1, int> outputs3 = { 1, { 18 } };
const TfLitePoolParams opdata4 = { kTfLitePaddingSame, 2,2, 2,1, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs4 = { 1, { 18 } };
const TfArray<1, int> outputs4 = { 1, { 19 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 19,13,6 } };
const TfArray<1, int> outputs5 = { 1, { 20 } };
const TfLitePoolParams opdata6 = { kTfLitePaddingSame, 2,2, 2,1, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs6 = { 1, { 20 } };
const TfArray<1, int> outputs6 = { 1, { 21 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 21,14,7 } };
const TfArray<1, int> outputs7 = { 1, { 22 } };
const TfLitePoolParams opdata8 = { kTfLitePaddingSame, 2,2, 2,1, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs8 = { 1, { 22 } };
const TfArray<1, int> outputs8 = { 1, { 23 } };
const TfLiteReshapeParams opdata9 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs9 = { 2, { 23,1 } };
const TfArray<1, int> outputs9 = { 1, { 24 } };
const TfLiteFullyConnectedParams opdata10 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs10 = { 3, { 24,9,8 } };
const TfArray<1, int> outputs10 = { 1, { 25 } };
const TfLiteFullyConnectedParams opdata11 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs11 = { 3, { 25,10,4 } };
const TfArray<1, int> outputs11 = { 1, { 26 } };
const TfLiteSoftmaxParams opdata12 = { 1 };
const TfArray<1, int> inputs12 = { 1, { 26 } };
const TfArray<1, int> outputs12 = { 1, { 27 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 13312, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 6144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1600, (TfLiteIntArray*)&tensor_dimension15, 600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 1600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1600, (TfLiteIntArray*)&tensor_dimension17, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 1600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1600, (TfLiteIntArray*)&tensor_dimension19, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 1600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1600, (TfLiteIntArray*)&tensor_dimension21, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 1600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1600, (TfLiteIntArray*)&tensor_dimension23, 832, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension24, 832, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 832, (TfLiteIntArray*)&tensor_dimension25, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16, (TfLiteIntArray*)&tensor_dimension26, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension27, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, const_cast<void*>(static_cast<const void*>(&opdata12)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static TfLiteStatus AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                                 size_t bytes, void** ptr) {
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    *ptr = malloc(bytes);
    if (*ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return kTfLiteError;
    }
    overflow_buffers.push_back(*ptr);
    return kTfLiteOk;
  }

  current_location -= bytes;

  *ptr = current_location;
  return kTfLiteOk;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  TfLiteStatus s = AllocatePersistentBuffer(ctx, b.bytes, &b.ptr);
  if (s != kTfLiteOk) {
    return s;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}
} // namespace

  TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 28;
  for(size_t i = 0; i < 28; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = *tflite::ops::micro::Register_RESHAPE();
  registrations[OP_CONV_2D] = *tflite::ops::micro::Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = *tflite::ops::micro::Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = *tflite::ops::micro::Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = *tflite::ops::micro::Register_SOFTMAX();

  for(size_t i = 0; i < 13; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 13; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  27, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 13; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
